{
  "title": "ProCogGraph",
  "version": "2.4",
  "settings": {
    "pagenumber": 0,
    "editable": false,
    "fullscreenEnabled": false,
    "parameters": {
      "neodash_entry_pdbentry": "1b42",
      "neodash_entry_pdbentry_display": "1b42",
      "neodash_max_cognate": "Best",
      "neodash_max_cognate_display": "Best",
      "neodash_domain_type": "CATH",
      "neodash_domain_type_display": "CATH",
      "neodash_parity_score_cutoff": "0.4",
      "neodash_ecid_ecid": "1.1.1.1",
      "neodash_ecid_ecid_display": "1.1.1.1",
      "neodash_domain_group": "3.40.50.720",
      "neodash_domain_group_display": "1.10.8.10",
      "neodash_entry_pdbentry_1": "1b42",
      "neodash_iframe_url": "http://localhost:8080/",
      "neodash_iframe_header": "Interface: 1b42:A:1b42A00 - bm2:M1A:600:A",
      "neodash_d_count": 2,
      "neodash_pdb_properties": {
        "pdbECList": [
          "2.1.1.57"
        ],
        "keywords": "METHYLTRANSFERASE",
        "displayPDBECList": [
          "A:2.1.1.57"
        ],
        "pdbEntry": "1b42",
        "title": "VACCINIA METHYLTRANSFERASE VP39 COMPLEXED WITH M1ADE AND S-ADENOSYLHOMOCYSTEINE"
      },
      "neodash_pdb_ecs": "* A:2.1.1.57",
      "neodash_be_count": 4,
      "neodash_bl_count": 1,
      "neodash_bd_count": 2,
      "neodash_boundentity_query": "SAH",
      "neodash_be_instances": {
        "low": 1481,
        "high": 0
      },
      "neodash_bd_uniqueid": "23861",
      "neodash_pdb_ligand_properties": {
        "descriptor": "O=C(O)C(N)CCSCC3OC(n2cnc1c(ncnc12)N)C(O)C3O",
        "description": "S-ADENOSYL-L-HOMOCYSTEINE",
        "name": "SAH",
        "uniqueID": "23861"
      },
      "neodash_pdb_instances": {
        "low": 1011,
        "high": 0
      },
      "neodash_iframe_url_pdbligand": "http://localhost:8080",
      "neodash_pdb_lig_domint_entries": [
        "1khh",
        "2ex4",
        "1f3l",
        "2fyt",
        "5epe",
        "3bus",
        "3hce",
        "1r00",
        "3p2e",
        "3pb3",
        "4ft2",
        "2g1p",
        "3p9i",
        "3p9k",
        "4h0n",
        "4m38",
        "5egs",
        "6i5z",
        "1svu",
        "3b5i",
        "4y2h",
        "5cvv",
        "1kpg",
        "1kph",
        "3gu3",
        "5e1o",
        "2b3t",
        "2gb4",
        "3bgd",
        "3bgi",
        "3njr",
        "4oqe",
        "5pa7",
        "2ony",
        "2onz",
        "3hca",
        "3hcd",
        "3kpj",
        "3kqy",
        "3kr0",
        "3kr1",
        "3kr2",
        "3duw",
        "6i6k",
        "6i6l",
        "6i6m",
        "6i6n",
        "3b3f",
        "1q0t",
        "3ssm",
        "4x63",
        "6dcb",
        "6dcc",
        "3v97",
        "2p35",
        "4da4",
        "2xyq",
        "1d2h",
        "10mh",
        "1m0e",
        "1mht",
        "1skm",
        "2hr1",
        "2i9k",
        "2z6a",
        "2z6u",
        "2zcj",
        "3mht",
        "4mht",
        "5mht",
        "7mht",
        "8mht",
        "9mht",
        "3vc1",
        "4v0q",
        "4v0r",
        "2xbm",
        "3ua3",
        "5cd1",
        "3cjq",
        "3g8a",
        "3lhd",
        "5lv3",
        "3pla",
        "2h11",
        "3i53",
        "6c8r",
        "6c8s",
        "2px5",
        "2oyr",
        "2wk1",
        "4kdr",
        "4l7v",
        "4qpn",
        "5dpm",
        "5hil",
        "5him",
        "5p9s",
        "5pa0",
        "5pa3",
        "5pa6",
        "1kyz",
        "2v74",
        "2xvm",
        "3cjt",
        "1r6a",
        "1sui",
        "1sus",
        "3x0d",
        "1av6",
        "1x1b",
        "3r0q",
        "3htx",
        "2zwa",
        "4uy6",
        "2oy0",
        "2pxx",
        "3egv",
        "4lec",
        "4pyo",
        "4qdk",
        "5xvk",
        "5yji",
        "5zw3",
        "6qe5",
        "1u2z",
        "4pip",
        "6dub",
        "2qyo",
        "5ciy",
        "1m6y",
        "1nw7",
        "6c5b",
        "3gwz",
        "6cig",
        "2ob2",
        "4ckc",
        "4mtl",
        "1aqi",
        "2cww",
        "3sso",
        "3gdh",
        "6arv",
        "3cbg",
        "3px2",
        "3ha3",
        "3qv2",
        "1rjg",
        "1l1e",
        "5e8r",
        "6fdf",
        "1rje",
        "4blw",
        "2c7o",
        "2c7p",
        "2c7q",
        "2c7r",
        "2uyc",
        "2uyh",
        "2uz4",
        "3eva",
        "3evb",
        "3evc",
        "3eve",
        "3evf",
        "3evd",
        "1ori",
        "2y1x",
        "6arj",
        "3ssn",
        "5p9q",
        "5pa5",
        "5p9t",
        "5gp1",
        "3q7e",
        "4g56",
        "1zhf",
        "1b42",
        "1bky",
        "1eam",
        "1eqa",
        "1jsz",
        "1jte",
        "1jtf",
        "1p39",
        "1v39",
        "1vp3",
        "1vp9",
        "2vp3",
        "3mag",
        "3mct",
        "4dcg",
        "4xcx",
        "1wzn",
        "2p41",
        "5ih3",
        "1fjx",
        "2z6q",
        "1or8",
        "3tky",
        "3c3y",
        "4ckb",
        "4cke",
        "3pfh",
        "3px3",
        "5e9j",
        "4oqd",
        "2opb",
        "3lga",
        "5p9r",
        "2qrv",
        "5e2a",
        "5gip",
        "5wxb",
        "3ofk",
        "2xyv",
        "2bh2",
        "5e9w",
        "3pta",
        "5p9o",
        "5p9u",
        "5pa4",
        "6gy1",
        "6o96",
        "2ytz",
        "2p3q",
        "3lbf",
        "2eg5",
        "5u4x",
        "5cvu",
        "2vdw",
        "5cvj",
        "5ccb",
        "5ccx",
        "5fqn",
        "5fqo",
        "5ful",
        "5gin",
        "5gio",
        "1yf3",
        "2pwy",
        "4gbe",
        "3g5t",
        "5dst",
        "1fp1",
        "1yz3",
        "1orh",
        "1fp2",
        "5e1d",
        "3rod",
        "5cvd",
        "5cve",
        "5e1b",
        "5e2b",
        "5yjf",
        "5una",
        "4e2y",
        "4e33",
        "3tr6",
        "2bzg",
        "5ftw",
        "1tpy",
        "1g55",
        "1zg3",
        "1zga",
        "1i1n",
        "2p1d",
        "4oa5",
        "6aw8",
        "6aw9",
        "4fgz",
        "5pa1",
        "3dmg",
        "1hnn",
        "1p1c",
        "2an3",
        "3kpu",
        "3kpv",
        "3kpw",
        "3kpy",
        "3kqm",
        "3kqo",
        "3kqp",
        "3kqq",
        "3kqs",
        "3kqt",
        "3kqv",
        "3kqw",
        "4dm3",
        "1jqd",
        "1jqe",
        "2a14",
        "2jjq",
        "1yfj",
        "5e1m",
        "4e2x",
        "4y30",
        "4ft4",
        "2px2",
        "1n7i",
        "1n7j",
        "1boo",
        "3p9c",
        "4hc4",
        "4m37",
        "4pwy",
        "5hzm",
        "5icc",
        "5ice",
        "5icf",
        "5wcf",
        "5xoh",
        "2aot",
        "2pxa",
        "2px4",
        "4x41",
        "3pt9",
        "4c4a",
        "5gut",
        "3ftf",
        "4dkj",
        "1qan",
        "5p9p",
        "5p9v",
        "5p9z",
        "5pa2",
        "3vc2",
        "1l3i",
        "4e31",
        "4e32",
        "4e30",
        "3wst",
        "2px8",
        "3reo",
        "1bc5",
        "5fub",
        "3qox",
        "5e8j",
        "3bgv",
        "4qpp",
        "2p3l",
        "3iei",
        "4k6m",
        "3orh",
        "1p1b",
        "2i62",
        "2iip",
        "5bxy",
        "2h00",
        "2g8n",
        "2obf",
        "3hcc",
        "3hcf",
        "4rtk",
        "4rtn",
        "4rtq",
        "3ujb",
        "4r6x",
        "1jg1",
        "4kvz",
        "4o29",
        "3tlj",
        "4pio",
        "5yn8",
        "5yno",
        "5ynq",
        "6cx6",
        "4e2w",
        "2an5",
        "2an4",
        "3gxo",
        "4e2z",
        "3dxz",
        "4fsx",
        "2g71",
        "3hcb",
        "2ore",
        "1wy7",
        "4r6w",
        "6aw7",
        "2eju",
        "2vs1",
        "5nju",
        "1l9k",
        "3ely",
        "1kpi",
        "3evg",
        "3u81",
        "1xcj",
        "1xcl",
        "5is8",
        "3frh",
        "3fri",
        "2p3o",
        "5ccv",
        "5goz",
        "1af7",
        "1ri1",
        "1ri3",
        "1kr5",
        "1nv9",
        "1q0s",
        "1r18",
        "1t43",
        "2zbq",
        "3grr",
        "3lcc",
        "4pyn"
      ],
      "neodash_": [
        "3.40.50.150:exclusive"
      ],
      "neodash_superfamily_cognate_ligand": "6174",
      "neodash_superfamily_cognate_ligand_name": "NAD+",
      "neodash_group_level": "Superfamily",
      "neodash_domain_superfamily_id": "3.40.50.720",
      "neodash_domain_desc": "3.40.50.720 (NAD(P)-binding Rossmann-like Domain)",
      "neodash_domint_entries": [
        "5kka",
        "5kkc",
        "5w8k",
        "5w8l",
        "5nfr",
        "6bb3",
        "4uun",
        "4m1q",
        "6ct6",
        "1uxj",
        "1uxk",
        "5ixs",
        "4zvv",
        "4wle",
        "4wlf",
        "5ixy",
        "5a1t",
        "6h9s",
        "9ldb",
        "9ldt",
        "4wlo",
        "4wlu",
        "4wlv",
        "5nue",
        "1bdm",
        "4r68",
        "4r69",
        "5nuf",
        "1hyh",
        "4ros",
        "2x0i",
        "2x0j",
        "1guy",
        "1guz",
        "1civ",
        "1u5c",
        "1b8u",
        "1b8v",
        "5ldh",
        "1i0z",
        "1mld",
        "1gv0",
        "1wze",
        "2x0r",
        "5yta",
        "1wzi",
        "1i10",
        "5mdh",
        "5kvv",
        "1lth",
        "1ldg",
        "1o6z",
        "5zi2",
        "5zi4",
        "6cep",
        "6bad",
        "1ldm",
        "6bag",
        "6bal",
        "5nqb",
        "6bax",
        "6baz",
        "1ldn",
        "6bb0",
        "5nqq",
        "6bb1",
        "1lld",
        "6bb2",
        "2e37",
        "1t24",
        "1y7t",
        "2a92",
        "1ur5",
        "2a94",
        "1t25",
        "1t26",
        "1pzf",
        "1pzg",
        "2cvq",
        "1t2c",
        "1pzh",
        "1t2d",
        "1t2e",
        "1sow",
        "1ib6",
        "1t2f",
        "3gvh",
        "4mdh",
        "1uxg",
        "1uxh",
        "1hlp",
        "2aa3",
        "1uxi",
        "1emd",
        "1bmd",
        "1oc4",
        "2v7p",
        "1smk",
        "4okn",
        "2ldb",
        "2cmd",
        "4m49",
        "1ie3",
        "3om9",
        "2hjr",
        "4l4s",
        "2fn7",
        "2dfd",
        "3d4p",
        "2xxj",
        "3vph",
        "4qo7",
        "1ez4",
        "4plc",
        "4qo8",
        "3h3f",
        "3h3j",
        "3ldh",
        "4plf",
        "4plg",
        "3wsw",
        "4aje",
        "4plh",
        "3czm",
        "4plt",
        "4ajh",
        "1hyg",
        "4plv",
        "4i1i",
        "3pqd",
        "4nd1",
        "4nd2",
        "4nd3",
        "4plw",
        "4ply",
        "4plz",
        "4jnk",
        "4nd4"
      ],
      "neodash_domint": [
        "3.40.50.720:major_partner",
        "3.90.110.10:partner"
      ],
      "neodash_pdb_lig_cognate_url": "http://localhost:8080/",
      "neodash_iframe_url_pdb_ligand": "http://localhost:8080",
      "neodash_cognate_ligand_name": "glucose",
      "neodash_enzyme_focus": "1.1.1.1",
      "neodash_enzymesubsubclass_desc": "With NAD(+) or NADP(+) as acceptor.",
      "neodash_enzymesubclass_desc": "Acting on the CH-OH group of donors.",
      "neodash_enzymeclass_desc": "Oxidoreductases.",
      "neodash_enzyme_desc": "alcohol dehydrogenase.",
      "neodash_enzymesubsubclass_id": "1.1.1.-",
      "neodash_enzymesubclass_id": "1.1.-.-",
      "neodash_enzymeclass_id": "1.-.-.-",
      "neodash_blsize": 41,
      "neodash_ec_iframe_url": "http://localhost:8080",
      "neodash_entry_pdbentry_2": "1b42",
      "neodash_entry_pdbentry_2_display": "1b42",
      "neodash_domain_group_1": "3.40.50.720",
      "neodash_domain_group_1_display": "3.40.50.720",
      "neodash_domain_group_2": "1.10.10.10",
      "neodash_domain_group_2_display": "1.10.10.10",
      "neodash_biological_ligand_name": "ID:6890",
      "neodash_iframe_url_cognate": "http://localhost:8080",
      "neodash_bl_properties": {
        "ligandDB": [
          "POLYMER:12391",
          "KEGG:C00936",
          "CHEBI:40656",
          "KEGG:C01487",
          "Pubchem:6036",
          "POLYMER:15227",
          "CHEBI:27667",
          "Pubchem:439507",
          "POLYMER:14303",
          "Pubchem:185698",
          "Pubchem:79025",
          "POLYMER:14304",
          "GlyTouCan:G61491DK",
          "POLYMER:11882",
          "Pubchem:439353",
          "POLYMER:11350",
          "KEGG:C00159",
          "CHEBI:4139",
          "CHEBI:15903",
          "POLYMER:11881",
          "CHEBI:17925",
          "POLYMER:10183",
          "POLYMER:12390",
          "POLYMER:11150",
          "CHEBI:28061",
          "KEGG:C01825",
          "CHEBI:28563",
          "POLYMER:14707",
          "KEGG:C00738",
          "KEGG:C00984",
          "CHEBI:37619",
          "POLYMER:11145",
          "KEGG:C02209",
          "Pubchem:24892722",
          "POLYMER:11351",
          "POLYMER:10034",
          "Pubchem:439680",
          "Pubchem:439357",
          "KEGG:C00267",
          "KEGG:C00962",
          "KEGG:C00124",
          "POLYMER:11146",
          "POLYMER:16082",
          "GlyTouCan:G09546QO",
          "POLYMER:9584",
          "POLYMER:11151",
          "Pubchem:64689",
          "CHEBI:42905",
          "KEGG:C00031",
          "POLYMER:15895",
          "GlyTouCan:G71142DF",
          "CHEBI:4167",
          "KEGG:C00221",
          "GlyTouCan:G65889KE",
          "Pubchem:206",
          "CHEBI:28729",
          "POLYMER:10033",
          "CHEBI:4093",
          "POLYMER:9587",
          "CHEBI:4208",
          "KEGG:C00737",
          "Pubchem:18950",
          "GlyTouCan:G74840NI",
          "Pubchem:12003287",
          "Pubchem:5793",
          "POLYMER:10035",
          "POLYMER:9586",
          "POLYMER:11144"
        ],
        "compoundReactionIDs": [
          "R06722",
          "R12477",
          "R06279",
          "RHEA:17826",
          "RHEA:10265",
          "RHEA:18626",
          "R00299",
          "R03075",
          "R01099",
          "R01098",
          "RHEA:18826",
          "RHEA:57037",
          "RHEA:27398",
          "R02595",
          "R03604",
          "R04006",
          "RHEA:19934",
          "R00307",
          "R00878",
          "RHEA:14406",
          "RHEA:14294",
          "RHEA:33976",
          "RHEA:33980",
          "R00028",
          "R00801",
          "R06087",
          "R03576",
          "R02185",
          "RHEA:11177",
          "R10809",
          "R11620",
          "RHEA:49233",
          "R01522",
          "R10622",
          "RHEA:14178",
          "R06261",
          "RHEA:17798",
          "R12250",
          "R01602",
          "R01097",
          "R01094",
          "R08544",
          "R01096",
          "R06088",
          "R00802",
          "R01678",
          "R06010",
          "R01105",
          "R06098",
          "R04633",
          "R03355",
          "R05994",
          "R06099",
          "R05112",
          "R07807",
          "R06202",
          "R09085",
          "RHEA:18550",
          "R12208",
          "R12209",
          "R05698",
          "RHEA:68809",
          "R01521",
          "R01520",
          "R01326",
          "RHEA:31348",
          "R06107",
          "R06104",
          "R03802",
          "R02887",
          "R00306",
          "R06109",
          "R01444",
          "R03801",
          "R06108",
          "R06106",
          "R05142",
          "R06105",
          "R05141",
          "R08614",
          "R08613",
          "R01332",
          "R06207",
          "RHEA:16042",
          "RHEA:11957",
          "RHEA:62021",
          "R06199",
          "R01718",
          "R06080",
          "R06079",
          "R05140",
          "RHEA:14406",
          "R06059",
          "R04194",
          "R05980",
          "R05981",
          "RHEA:59313",
          "RHEA:23025",
          "R02630",
          "RHEA:22665",
          "RHEA:13270",
          "RHEA:16690",
          "R06275",
          "R01331",
          "R06150",
          "R06149",
          "R05816",
          "RHEA:14298",
          "R08404",
          "R12479",
          "R06042",
          "R00725",
          "R00299",
          "R01139",
          "R00049",
          "RHEA:56005",
          "R12983",
          "R08544",
          "R06099",
          "R04498",
          "RHEA:37896",
          "R06158",
          "R02109",
          "R01092",
          "RHEA:12405",
          "RHEA:12025",
          "R06058",
          "R00953",
          "RHEA:70780",
          "RHEA:49405",
          "RHEA:11417",
          "RHEA:29316",
          "RHEA:33368",
          "R09568",
          "R11544",
          "RHEA:18626",
          "RHEA:42393",
          "R00874",
          "R01788",
          "RHEA:32060",
          "RHEA:22153",
          "R06077",
          "R05984",
          "R05979",
          "R02848",
          "R02850",
          "R02849",
          "RHEA:21477",
          "RHEA:12918",
          "R10580",
          "R12969",
          "R00534",
          "R06084",
          "R06088",
          "R00802",
          "RHEA:12626",
          "R00063",
          "RHEA:74240",
          "R07674",
          "R01329",
          "R06142",
          "RHEA:22605",
          "RHEA:28547",
          "RHEA:22037",
          "RHEA:19110",
          "R00838",
          "R06113",
          "R00837",
          "R06115",
          "R06071",
          "RHEA:38336",
          "R06053",
          "R02727",
          "R09941",
          "RHEA:11029",
          "R02847",
          "R01006",
          "RHEA:32524",
          "RHEA:59093",
          "R12664",
          "R00947",
          "R00337",
          "R06262",
          "RHEA:13554",
          "RHEA:24573",
          "R06067",
          "R00503",
          "RHEA:70176",
          "RHEA:16258",
          "R03703",
          "R10581",
          "RHEA:19146",
          "R07264",
          "R02985",
          "R07147",
          "RHEA:41733",
          "R01330",
          "R01327",
          "R01326",
          "RHEA:69612",
          "R06276",
          "RHEA:20410",
          "RHEA:47417",
          "RHEA:25409",
          "R00026",
          "R10039",
          "R13051",
          "R06092",
          "R13052",
          "R06077",
          "R13065",
          "R10035",
          "R13081",
          "R10040",
          "R04333",
          "RHEA:21289",
          "RHEA:21117",
          "R03820",
          "R06114",
          "R01100",
          "R09943",
          "R00300",
          "RHEA:40736",
          "RHEA:40744",
          "RHEA:40732",
          "RHEA:40740",
          "R12970",
          "R00850",
          "R01328",
          "R02187",
          "R06264",
          "R07675",
          "R02189",
          "RHEA:10077",
          "R00801",
          "R06087",
          "R01600",
          "RHEA:11069",
          "R08718",
          "R08717",
          "RHEA:55741",
          "R13002",
          "R10411",
          "R02558",
          "R06104",
          "R02887",
          "R04949",
          "R00306",
          "R04998",
          "R02985",
          "R03527",
          "R06103",
          "R00010",
          "RHEA:11669",
          "R01093",
          "R01095",
          "R01678",
          "R06098",
          "RHEA:31560",
          "R06078",
          "R03115",
          "RHEA:61621",
          "RHEA:23313",
          "RHEA:24161",
          "R01791",
          "R01790",
          "R06277",
          "RHEA:23525",
          "RHEA:12329",
          "R06094",
          "R01787",
          "R01097",
          "R01096",
          "RHEA:28676",
          "R12039",
          "RHEA:38912",
          "R02558",
          "R12095",
          "R06091",
          "R01101",
          "RHEA:19494",
          "R00302",
          "R01103",
          "R01329",
          "R06094",
          "R03618",
          "R05961",
          "R01194",
          "R06142",
          "R06091",
          "R01101",
          "R06152",
          "R06096",
          "R04470",
          "R03634",
          "R01104",
          "R06093",
          "R05549",
          "R02926",
          "R04019",
          "R06070",
          "R03323",
          "RHEA:38656",
          "RHEA:15050",
          "RHEA:16398",
          "R07265",
          "RHEA:14294",
          "R12997",
          "R00305",
          "RHEA:20422",
          "RHEA:12253",
          "R06199",
          "RHEA:49449",
          "RHEA:13858",
          "R01096",
          "R08544",
          "RHEA:26350",
          "RHEA:56001",
          "RHEA:55997",
          "R11407",
          "R11215",
          "RHEA:25610",
          "R10236",
          "R06069",
          "R05196",
          "RHEA:47373",
          "RHEA:16618",
          "RHEA:49261",
          "R01786",
          "R12038",
          "RHEA:65937",
          "R11306",
          "R08946",
          "R10525",
          "R01460",
          "RHEA:20638",
          "R11791",
          "R00839",
          "R06112",
          "R10619",
          "R10530",
          "R00550",
          "RHEA:56009",
          "RHEA:56029",
          "R04503",
          "RHEA:35580",
          "RHEA:19750",
          "R06620",
          "RHEA:35400",
          "RHEA:15030",
          "RHEA:36828",
          "R00015",
          "R06135",
          "R01331",
          "R06150",
          "R06151",
          "R05816",
          "RHEA:56053",
          "R00837",
          "R06113",
          "R00327",
          "R04094",
          "R00877",
          "R11398",
          "R11171",
          "R00960",
          "RHEA:21113",
          "RHEA:42405",
          "RHEA:15874",
          "R06214",
          "RHEA:18454",
          "RHEA:40772",
          "RHEA:15746",
          "R01096",
          "R01498",
          "R13178",
          "R12040",
          "R05804",
          "R06258",
          "RHEA:11429",
          "R06110",
          "R03256",
          "RHEA:19930",
          "R10494",
          "RHEA:32532",
          "R06280",
          "RHEA:56045",
          "RHEA:11461",
          "RHEA:37968",
          "RHEA:37964",
          "R03841",
          "R13126",
          "R09086",
          "RHEA:45773",
          "RHEA:55989",
          "R06147",
          "RHEA:49409",
          "R00303",
          "RHEA:16490",
          "R01332",
          "RHEA:13654",
          "R06056",
          "R00952",
          "RHEA:47685",
          "RHEA:52753",
          "RHEA:18826",
          "RHEA:14626",
          "RHEA:24541",
          "R02738",
          "R01555",
          "R06040",
          "RHEA:21181",
          "RHEA:44905",
          "RHEA:62389",
          "RHEA:60157",
          "RHEA:21297",
          "R06204",
          "R00308",
          "R08405",
          "R06263",
          "RHEA:32676",
          "RHEA:18190",
          "R04783",
          "R06144",
          "RHEA:23981",
          "R06260",
          "RHEA:10553",
          "R00301",
          "R07147",
          "R06259",
          "RHEA:18486",
          "R04411",
          "R04409",
          "R05061",
          "R04410",
          "R00304",
          "R07135",
          "RHEA:23513",
          "RHEA:42693",
          "RHEA:14558",
          "RHEA:12990",
          "R03148",
          "RHEA:23009",
          "R01100",
          "R06114",
          "R06093",
          "RHEA:36072",
          "R11942",
          "R04422",
          "R00801",
          "R06087",
          "R01791",
          "R01718",
          "R06080",
          "R07620",
          "R12979",
          "RHEA:58457",
          "R08514",
          "RHEA:18514",
          "RHEA:10773",
          "R09723",
          "R13179",
          "R03617",
          "RHEA:38340"
        ],
        "isCofactor": "N",
        "name": [
          "G13027",
          "D-Aldose",
          "D-Allose",
          "D-Hexose",
          "D-Glucose",
          "D-Mannose",
          "Galactinol",
          "D-galactose",
          "D-Galactose",
          "L-Galactose",
          "POLYMER:9584",
          "POLYMER:9586",
          "POLYMER:9587",
          "POLYMER:10033",
          "POLYMER:10034",
          "POLYMER:10035",
          "POLYMER:10183",
          "POLYMER:11144",
          "POLYMER:11145",
          "POLYMER:11146",
          "POLYMER:11150",
          "POLYMER:11151",
          "POLYMER:11350",
          "POLYMER:11351",
          "POLYMER:11881",
          "POLYMER:11882",
          "POLYMER:12390",
          "POLYMER:12391",
          "POLYMER:14303",
          "POLYMER:14304",
          "POLYMER:14707",
          "POLYMER:15227",
          "POLYMER:15895",
          "POLYMER:16082",
          "D-allopyranose",
          "D-ALLOPYRANOSE",
          "beta-D-glucose",
          "beta-D-Glucose",
          "beta-D-Mannose",
          "beta-D-mannose",
          "D-glucopyranose",
          "D-mannopyranose",
          "alpha-D-glucose",
          "alpha-D-Glucose",
          "alpha-D-mannose",
          "alpha-D-Mannose",
          "Glucosylceramide",
          "beta-D-Galactose",
          "beta-D-galactose",
          "D-galactopyranose",
          "L-galactopyranose",
          "alpha-D-Galactose",
          "alpha-D-galactose",
          "alpha-L-galactose",
          "Galactosylceramide",
          "Dolichyl phosphate D-mannose",
          "Dolichyl D-glucosyl phosphate",
          "Phosphatidyl-myo-inositol monomannoside"
        ],
        "uniqueID": "8255",
        "canonicalSMILES": "OCC1OC(O)C(O)C(O)C1O"
      },
      "neodash_bl_names": "G13027,D-Aldose,D-Allose,D-Hexose,D-Glucose,D-Mannose,Galactinol,D-galactose,D-Galactose,L-Galactose,POLYMER:9584,POLYMER:9586,POLYMER:9587,POLYMER:10033,POLYMER:10034,POLYMER:10035,POLYMER:10183,POLYMER:11144,POLYMER:11145,POLYMER:11146,POLYMER:11150,POLYMER:11151,POLYMER:11350,POLYMER:11351,POLYMER:11881,POLYMER:11882,POLYMER:12390,POLYMER:12391,POLYMER:14303,POLYMER:14304,POLYMER:14707,POLYMER:15227,POLYMER:15895,POLYMER:16082,D-allopyranose,D-ALLOPYRANOSE,beta-D-glucose,beta-D-Glucose,beta-D-Mannose,beta-D-mannose,D-glucopyranose,D-mannopyranose,alpha-D-glucose,alpha-D-Glucose,alpha-D-mannose,alpha-D-Mannose,Glucosylceramide,beta-D-Galactose,beta-D-galactose,D-galactopyranose,L-galactopyranose,alpha-D-Galactose,alpha-D-galactose,alpha-L-galactose,Galactosylceramide,Dolichyl phosphate D-mannose,Dolichyl D-glucosyl phosphate,Phosphatidyl-myo-inositol monomannoside",
      "neodash_bl_liganddb": "* [POLYMER:12391]POLYMER:12391)  \n* [KEGG:C00936](https://www.genome.jp/entry/C00936)  \n* [CHEBI:40656](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:40656)  \n* [KEGG:C01487](https://www.genome.jp/entry/C01487)  \n* [Pubchem:6036](https://pubchem.ncbi.nlm.nih.gov/compound/6036)  \n* [POLYMER:15227]POLYMER:15227)  \n* [CHEBI:27667](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:27667)  \n* [Pubchem:439507](https://pubchem.ncbi.nlm.nih.gov/compound/439507)  \n* [POLYMER:14303]POLYMER:14303)  \n* [Pubchem:185698](https://pubchem.ncbi.nlm.nih.gov/compound/185698)  \n* [Pubchem:79025](https://pubchem.ncbi.nlm.nih.gov/compound/79025)  \n* [POLYMER:14304]POLYMER:14304)  \n* [GlyTouCan:G61491DK](https://glytoucan.org/Structures/Glycans/G61491DK)  \n* [POLYMER:11882]POLYMER:11882)  \n* [Pubchem:439353](https://pubchem.ncbi.nlm.nih.gov/compound/439353)  \n* [POLYMER:11350]POLYMER:11350)  \n* [KEGG:C00159](https://www.genome.jp/entry/C00159)  \n* [CHEBI:4139](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:4139)  \n* [CHEBI:15903](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:15903)  \n* [POLYMER:11881]POLYMER:11881)  \n* [CHEBI:17925](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:17925)  \n* [POLYMER:10183]POLYMER:10183)  \n* [POLYMER:12390]POLYMER:12390)  \n* [POLYMER:11150]POLYMER:11150)  \n* [CHEBI:28061](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:28061)  \n* [KEGG:C01825](https://www.genome.jp/entry/C01825)  \n* [CHEBI:28563](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:28563)  \n* [POLYMER:14707]POLYMER:14707)  \n* [KEGG:C00738](https://www.genome.jp/entry/C00738)  \n* [KEGG:C00984](https://www.genome.jp/entry/C00984)  \n* [CHEBI:37619](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:37619)  \n* [POLYMER:11145]POLYMER:11145)  \n* [KEGG:C02209](https://www.genome.jp/entry/C02209)  \n* [Pubchem:24892722](https://pubchem.ncbi.nlm.nih.gov/compound/24892722)  \n* [POLYMER:11351]POLYMER:11351)  \n* [POLYMER:10034]POLYMER:10034)  \n* [Pubchem:439680](https://pubchem.ncbi.nlm.nih.gov/compound/439680)  \n* [Pubchem:439357](https://pubchem.ncbi.nlm.nih.gov/compound/439357)  \n* [KEGG:C00267](https://www.genome.jp/entry/C00267)  \n* [KEGG:C00962](https://www.genome.jp/entry/C00962)  \n* [KEGG:C00124](https://www.genome.jp/entry/C00124)  \n* [POLYMER:11146]POLYMER:11146)  \n* [POLYMER:16082]POLYMER:16082)  \n* [GlyTouCan:G09546QO](https://glytoucan.org/Structures/Glycans/G09546QO)  \n* [POLYMER:9584]POLYMER:9584)  \n* [POLYMER:11151]POLYMER:11151)  \n* [Pubchem:64689](https://pubchem.ncbi.nlm.nih.gov/compound/64689)  \n* [CHEBI:42905](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:42905)  \n* [KEGG:C00031](https://www.genome.jp/entry/C00031)  \n* [POLYMER:15895]POLYMER:15895)  \n* [GlyTouCan:G71142DF](https://glytoucan.org/Structures/Glycans/G71142DF)  \n* [CHEBI:4167](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:4167)  \n* [KEGG:C00221](https://www.genome.jp/entry/C00221)  \n* [GlyTouCan:G65889KE](https://glytoucan.org/Structures/Glycans/G65889KE)  \n* [Pubchem:206](https://pubchem.ncbi.nlm.nih.gov/compound/206)  \n* [CHEBI:28729](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:28729)  \n* [POLYMER:10033]POLYMER:10033)  \n* [CHEBI:4093](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:4093)  \n* [POLYMER:9587]POLYMER:9587)  \n* [CHEBI:4208](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:4208)  \n* [KEGG:C00737](https://www.genome.jp/entry/C00737)  \n* [Pubchem:18950](https://pubchem.ncbi.nlm.nih.gov/compound/18950)  \n* [GlyTouCan:G74840NI](https://glytoucan.org/Structures/Glycans/G74840NI)  \n* [Pubchem:12003287](https://pubchem.ncbi.nlm.nih.gov/compound/12003287)  \n* [Pubchem:5793](https://pubchem.ncbi.nlm.nih.gov/compound/5793)  \n* [POLYMER:10035]POLYMER:10035)  \n* [POLYMER:9586]POLYMER:9586)  \n* [POLYMER:11144]POLYMER:11144)",
      "neodash_coglig_group_pdbs": [],
      "neodash_bl_query_unique_id": "8255",
      "neodash_bl_query_name": "G13027",
      "neodash_coglig_domint_entries": [
        null
      ]
    },
    "theme": "light",
    "downloadImageEnabled": true,
    "queryTimeLimit": 45,
    "disableRowLimiting": false
  },
  "pages": [
    {
      "title": "Home",
      "reports": [
        {
          "id": "9ce2ef86-a45e-440f-9838-68b4e2a51a7a",
          "title": "   ",
          "query": "![ProCogGraph Logo](https://raw.githubusercontent.com/m-crown/ProCogGraph/main/images/PROCOGGRAPH%20full%20logo%20v1.png)\nWelcome to ProCogGraph! ProCogGraph is a graph-based cognate ligand-domain interaction database for exploring and mining domain-cognate ligand interactions.  \n&nbsp;  \nTo get started, navigate to the search page and search for a PDB ID, domain, EC ID, or ligand. For more information on the methods employed by ProCogGraph, check out the [ProCogGraph repo](https://github.com/m-crown/ProCogGraph)  \n&nbsp;  \nNote: depending on screen resolution/DPI, the dashboard view can be either very small or very large and cluttered. CTRL/cmd +/- followed by a page refresh can be used to scale the dashboard appropriately for your monitor.",
          "width": 9,
          "height": 5,
          "x": 7,
          "y": 0,
          "type": "text",
          "selection": {},
          "settings": {},
          "schema": []
        },
        {
          "id": "321b5ccb-c463-4f48-a865-e9680de75a56",
          "title": "Summary",
          "query": "MATCH (p:procoggraph) \nRETURN\n\"\" as ``,\np.database_version as `Database Version`,\np.date_created as `Creation Date`,\np.num_entries as `Num PDBs`,\np.num_bound_molecules as `Num Bound Molecules`,\np.num_bound_descriptors as `Num Bound Descriptors`,\np.num_cognate_ligands as `Num Cognate Ligands`\n\n\n\n\n\n",
          "width": 9,
          "height": 4,
          "x": 7,
          "y": 5,
          "type": "table",
          "selection": {},
          "settings": {
            "compact": true,
            "columnWidths": "[75,25]",
            "wrapContent": true,
            "transposed": true
          },
          "database": "neo4j"
        }
      ]
    },
    {
      "title": "Search",
      "reports": [
        {
          "id": "117bc9e3-c9aa-405a-a136-d2eedd819304",
          "title": "Domain Search",
          "query": "MATCH (n:`domain`) \nWHERE toLower(toString(n.`group`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`group` as value,  n.`group` as display ORDER BY size(toString(value)) ASC LIMIT 5",
          "width": 4,
          "height": 2,
          "x": 0,
          "y": 8,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Node Property",
            "backgroundColor": "#2991E559",
            "helperText": "Domain Accession",
            "defaultValue": "Domain Accession",
            "entityType": "domain",
            "propertyType": "group",
            "propertyTypeDisplay": "group",
            "parameterName": "neodash_domain_group"
          },
          "schema": [],
          "database": "neo4j"
        },
        {
          "id": "33fab934-95f4-4083-9e10-bd30ecc3318e",
          "title": "Domain Results",
          "query": "CALL apoc.when($neodash_max_cognate = \"Best\", 'RETURN [\"Y\"] as cognate_options', 'RETURN [\"Y\", \"N\"] as cognate_options') YIELD value WITH value.cognate_options as cognate_options\nWITH cognate_options\nCALL apoc.case([\n      $neodash_domain_type = \"SCOP\", 'MATCH (d: scopDomain)-[:IS_IN_SCOP_FAMILY]->(sf:scopFamily)-[:IS_IN_SCOP_SUPERFAMILY]->(ssf:scopSuperfamily {scopSuperfamily: neodash_domain_group}) RETURN ssf.scopSuperfamily + \" (\" + ssf.description + \")\" as ssf_desc, \"Superfamily\" as group_level, ssf.description as ssf_id',\n      $neodash_domain_type = \"CATH\", 'MATCH (d: cathDomain)-[:IS_IN_CATH_HOMOLOGOUS_SUPERFAMILY]->(ch:cathHomologousSuperfamily {cathHomologousSuperfamily: neodash_domain_group}) RETURN ch.cathHomologousSuperfamily + \" (\" + ch.description + \")\" as ssf_desc, \"Superfamily\" as group_level, ch.cathHomologousSuperfamily as ssf_id',\n      $neodash_domain_type = \"Pfam\", 'MATCH (d:pfamDomain {group: neodash_domain_group}) RETURN d.group_description  as ssf_desc, \"Family\" as group_level, d.group as ssf_id',\n      $neodash_domain_type = \"Superfamily\", 'MATCH (d: superfamilyDomain {group:neodash_domain_group}) RETURN d.superfamilyAccession + \" (\" + d.description + \")\" as ssf_desc, \"Superfamily\" as group_level, d.superfamilyAccession as ssf_id',\n      $neodash_domain_type = \"Gene3D\", 'MATCH (d:gene3dDomain {group:neodash_domain_group}) RETURN d.group_description as ssf_desc, cognate_ligand_count, \"Superfamily\" as group_level, d.gene3dAccession as ssf_id',\n      $neodash_domain_type = \"SCOP2-SF\", 'MATCH (d:scop2SfDomain {group: neodash_domain_group}) RETURN ssf.scop2Superfamily + \" (\" + ssf.description + \")\" as ssf_desc, ssf.description as description, d.domain as domain, d.url as url, \"Superfamily\" as group_level, ssf.scop2Superfamily as ssf_id',\n      $neodash_domain_type = \"SCOP2-FA\", 'MATCH (d:scop2FaDomain {group: neodash_domain_group}) RETURN ssf.scop2Family + \" (\" + ssf.description + \")\" as ssf_desc,  ssf.description as description, \"Family\" as group_level, ssf.scop2Family as ssf_id'],\n'RETURN NULL', {cognate_options:cognate_options, neodash_domain_group:$neodash_domain_group}) YIELD value \nWITH value.ssf_desc as Superfamily, value.group_level as group_level, value.ssf_id as ssf_id\nRETURN DISTINCT ssf_id as Accession, Superfamily as __superfamily_desc, group_level as __group_level, ssf_id as __ssf_id \nLIMIT 1000",
          "width": 4,
          "height": 2,
          "x": 4,
          "y": 8,
          "type": "table",
          "selection": {},
          "settings": {
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Accession",
                "value": "__group_level",
                "customization": "set variable",
                "customizationValue": "group_level"
              },
              {
                "condition": "Click",
                "field": "Accession",
                "value": "__ssf_id",
                "customization": "set variable",
                "customizationValue": "domain_superfamily_id"
              },
              {
                "condition": "Click",
                "field": "Accession",
                "value": "\"\"",
                "customization": "set variable",
                "customizationValue": "superfamily_cognate_ligand"
              },
              {
                "condition": "Click",
                "field": "Accession",
                "value": "3/Domain Search",
                "customization": "set page",
                "customizationValue": ""
              },
              {
                "condition": "Click",
                "field": "Accession",
                "value": "__superfamily_desc",
                "customization": "set variable",
                "customizationValue": "domain_desc"
              },
              {
                "condition": "Click",
                "field": "",
                "value": "Accession",
                "customization": "set variable",
                "customizationValue": "domain_group"
              }
            ],
            "fullscreenEnabled": true
          },
          "database": "neo4j"
        },
        {
          "id": "d0c94973-ae13-411c-8d33-9c994c85e693",
          "title": "Global Parameters",
          "query": "\n\n\n",
          "width": 9,
          "height": 3,
          "x": 8,
          "y": 0,
          "type": "forms",
          "selection": {},
          "settings": {
            "formFields": [
              {
                "type": "Free Text",
                "settings": {
                  "type": "Free Text",
                  "entityType": "parity_score_cutoff",
                  "parameterName": "neodash_parity_score_cutoff",
                  "defaultValue": "0.4",
                  "helperText": "PARITY Score Cutoff"
                },
                "query": "RETURN true;"
              },
              {
                "type": "Node Property",
                "settings": {
                  "type": "Node Property",
                  "entityType": "domain",
                  "propertyType": "type",
                  "propertyTypeDisplay": "type",
                  "parameterName": "neodash_domain_type",
                  "defaultValue": "CATH",
                  "helperText": "Select Domain Type (CATH, SCOP, Pfam, Superfamily, SCOP2-FA, SCOP2-SF, Gene3D)"
                },
                "query": "MATCH (n:`domain`) \nWHERE toLower(toString(n.`type`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`type` as value,  n.`type` as display ORDER BY size(toString(value)) ASC LIMIT 5"
              },
              {
                "type": "Custom Query",
                "settings": {
                  "type": "Custom Query",
                  "entityType": "max_cognate",
                  "parameterName": "neodash_max_cognate",
                  "defaultValue": "Best",
                  "helperText": "Filter cognate ligands (Best, Any, All)"
                },
                "query": "WITH [\"All\", \"Best\", \"Any\"] AS options_list\nUNWIND options_list AS option\nWITH option, $input AS input_text\nWHERE toLower(option) CONTAINS toLower(input_text)\nRETURN option AS suggestion"
              }
            ],
            "hasSubmitMessage": false,
            "hasSubmitButton": false,
            "backgroundColor": "#2991E559"
          },
          "schema": []
        },
        {
          "id": "34a549da-d555-46ab-aafa-4d9bee0accab",
          "title": "Getting Started",
          "query": "*Global Parameters:* Set the minimum similarity threshold for cognate ligands, select the domain database to use, and how to filter cognate ligands (Best = only cognate ligands with highest score, Any = all cognate ligands above the defined threshold, All: All bound entities are shown regardless of whether they have a cognate ligand match)  \n&nbsp;  \n*PDB Search:* Search for a structure by PDB ID. Results are displayed in the adjacent table. Click on a structure to be taken to the PDB search page with results for the structure.  \n&nbsp;  \n*EC ID Search* Search for an enzyme by EC ID, and view results including structures and cognate ligands.  \n&nbsp;  \n*Domain Search*  Search for a domain by Domain Accession - the grouping for a domain database (CATH, Gene3D = Homol. Superfam., Pfam = Family, SCOP/SUPERFAMILY/SCOP2-SF/SCOP2-FA = Superfamily)  \n&nbsp;  \n*Ligand Search* Search for a cognate ligand or bound entity by name or database cross-reference (free text field)",
          "width": 8,
          "height": 4,
          "x": 0,
          "y": 0,
          "type": "text",
          "selection": {},
          "settings": {},
          "schema": []
        },
        {
          "id": "8aa23d76-e94e-412b-bee0-71d9d94c5f50",
          "title": "Cognate Ligand Search",
          "query": "RETURN true;",
          "width": 4,
          "height": 3,
          "x": 8,
          "y": 3,
          "type": "select",
          "selection": {},
          "settings": {
            "formFields": [
              {
                "type": "Free Text",
                "settings": {
                  "type": "Free Text",
                  "entityType": "cognate_ligand_name",
                  "parameterName": "neodash_cognate_ligand_name",
                  "helperText": "Cognate Ligand or dbxref",
                  "defaultValue": "glucose"
                },
                "query": "RETURN true;"
              }
            ],
            "hasSubmitButton": false,
            "backgroundColor": "#2991E559",
            "type": "Free Text",
            "entityType": "cognate_ligand_name",
            "parameterName": "neodash_cognate_ligand_name",
            "defaultValue": "glucose",
            "helperText": "Cognate Ligand Name/DB ID"
          },
          "schema": []
        },
        {
          "id": "c1ce0cf4-d381-41a4-b09d-ab479a6974b7",
          "title": "Cognate Ligand Results",
          "query": "CALL apoc.when(toLower($neodash_cognate_ligand_name) STARTS WITH  \"id:\", 'RETURN \"id\" as search_type, apoc.text.replace($neodash_cognate_ligand_name, \"^id:|^ID:\", \"\") AS search', 'RETURN \"name_db\" as search_type, [part IN split(toUpper($neodash_cognate_ligand_name), \",\")] AS search', {neodash_cognate_ligand_name: $neodash_cognate_ligand_name}) YIELD value WITH value.search_type as search_type, value.search as search\nWITH search_type, search\nCALL apoc.case([\n  search_type = \"id\", 'MATCH (bl:cognateLigand) WHERE bl.uniqueID = $search RETURN bl', \n  search_type = \"name_db\", 'MATCH (bl:cognateLigand) WHERE ANY(item IN $search WHERE ANY(name in bl.name WHERE toUpper(name) CONTAINS item) OR ANY(db IN bl.ligandDB WHERE toUpper(db) CONTAINS item)) RETURN bl as bl'], \n\"RETURN NULL\", {search: search}) YIELD value WITH value.bl as bl\nRETURN DISTINCT bl.name[0] AS `Cognate Ligand`, properties(bl) as __properties , bl.uniqueID AS __uniqueID, \"http://localhost:8080/smiles_viewer.html?type=smiles&data=\" + apoc.text.urlencode(apoc.convert.toJson({name: bl.name[0], smiles: bl.canonicalSMILES})) as __iframe_url, apoc.text.join([db in bl.ligandDB | \"* [\" + db + \"]\" + apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(db, \"_CHEBI:[0-9]+\", \"\"), 'KEGG:', '(https://www.genome.jp/entry/'), 'Pubchem:', '(https://pubchem.ncbi.nlm.nih.gov/compound/'), 'CHEBI:', '(https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:'), 'GlyTouCan:', '(https://glytoucan.org/Structures/Glycans/'), 'RHEA:', '(https://www.rhea-db.org/rhea/'), 'BRENDA:', '(https://www.brenda-enzymes.org/ligand.php?brenda_ligand_id=')], \")  \\n\") + \")\" as __ligand_db, apoc.text.join(bl.name, \",\") as __bl_names, [] as __coglig_group_empty, [NULL] as __coglig_domint_entries",
          "width": 5,
          "height": 3,
          "x": 12,
          "y": 7,
          "type": "table",
          "selection": {},
          "settings": {
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__uniqueID",
                "customization": "set variable",
                "customizationValue": "bl_query_unique_id"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "Cognate Ligand",
                "customization": "set variable",
                "customizationValue": "bl_query_name"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__iframe_url",
                "customization": "set variable",
                "customizationValue": "iframe_url_cognate"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__properties",
                "customization": "set variable",
                "customizationValue": "bl_properties"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__ligand_db",
                "customization": "set variable",
                "customizationValue": "bl_liganddb"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__bl_names",
                "customization": "set variable",
                "customizationValue": "bl_names"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "4/Cognate Ligand Search",
                "customization": "set page",
                "customizationValue": ""
              },
              {
                "condition": "Click",
                "field": "",
                "value": "__coglig_group_empty",
                "customization": "set variable",
                "customizationValue": "coglig_group_pdbs"
              },
              {
                "condition": "Click",
                "field": "",
                "value": "__coglig_domint_entries",
                "customization": "set variable",
                "customizationValue": "coglig_domint_entries"
              }
            ]
          },
          "database": "neo4j"
        },
        {
          "id": "c58edec4-a445-4533-94fa-99b90f9a2492",
          "title": "Enzyme Query",
          "query": "\n\n\n",
          "width": 4,
          "height": 2,
          "x": 0,
          "y": 6,
          "type": "forms",
          "selection": {},
          "settings": {
            "formFields": [
              {
                "type": "Node Property",
                "settings": {
                  "type": "Node Property",
                  "entityType": "ecID",
                  "propertyType": "ecID",
                  "propertyTypeDisplay": "ecID",
                  "parameterName": "neodash_ecid_ecid",
                  "helperText": "Enzyme Comission ID"
                },
                "query": "MATCH (n:`ecID`) \nWHERE toLower(toString(n.`ecID`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`ecID` as value,  n.`ecID` as display ORDER BY size(toString(value)) ASC LIMIT 5"
              }
            ],
            "hasSubmitButton": false,
            "backgroundColor": "#2991E559"
          },
          "schema": []
        },
        {
          "id": "ad024b6a-6ca0-465f-be6e-5de2eda6492c",
          "title": "Enzyme Results",
          "query": "MATCH (bl:cognateLigand)-[:IS_IN_EC]->(ec:ecID {ecID: $neodash_ecid_ecid})-[:IS_IN_SUBSUBCLASS]->(ecssc:ecSubSubClass)-[:IS_IN_SUBCLASS]->(ecsc:ecSubClass)-[:IS_IN_CLASS]->(ecc:ecClass)\nRETURN DISTINCT ec.ecID as `EC ID`, ec.description as __ec_description, ecssc.description as __ecssc_desc, ecssc.ecID as __ecssc_id, ecsc.description as __ecsc_description, ecsc.ecID as __ecsc_id, ecc.description as __ecc_description, ecc.ecID as __ecc_id, count(DISTINCT(bl.uniqueID)) as __blsize, \"http://localhost:8080/smiles_viewer.html?type=reaction&data=\" + apoc.text.urlencode(apoc.convert.toJson(ec.reactionSmiles)) as __ec_iframe_url\n\n\n",
          "width": 4,
          "height": 2,
          "x": 4,
          "y": 6,
          "type": "table",
          "selection": {},
          "settings": {
            "actionsRules": [
              {
                "condition": "Click",
                "field": "EC ID",
                "value": "EC ID",
                "customization": "set variable",
                "customizationValue": "enzyme_focus"
              },
              {
                "condition": "Click",
                "field": "EC ID",
                "value": "__ecssc_desc",
                "customization": "set variable",
                "customizationValue": "enzymesubsubclass_desc"
              },
              {
                "condition": "Click",
                "field": "EC ID",
                "value": "__ecsc_description",
                "customization": "set variable",
                "customizationValue": "enzymesubclass_desc"
              },
              {
                "condition": "Click",
                "field": "EC ID",
                "value": "__ecc_description",
                "customization": "set variable",
                "customizationValue": "enzymeclass_desc"
              },
              {
                "condition": "Click",
                "field": "EC ID",
                "value": "__ec_description",
                "customization": "set variable",
                "customizationValue": "enzyme_desc"
              },
              {
                "condition": "Click",
                "field": "EC ID",
                "value": "__ecssc_id",
                "customization": "set variable",
                "customizationValue": "enzymesubsubclass_id"
              },
              {
                "condition": "Click",
                "field": "EC ID",
                "value": "__ecsc_id",
                "customization": "set variable",
                "customizationValue": "enzymesubclass_id"
              },
              {
                "condition": "Click",
                "field": "EC ID",
                "value": "__ecc_id",
                "customization": "set variable",
                "customizationValue": "enzymeclass_id"
              },
              {
                "condition": "Click",
                "field": "EC ID",
                "value": "__blsize",
                "customization": "set variable",
                "customizationValue": "blsize"
              },
              {
                "condition": "Click",
                "field": "EC ID",
                "value": "__ec_iframe_url",
                "customization": "set variable",
                "customizationValue": "ec_iframe_url"
              },
              {
                "condition": "Click",
                "field": "EC ID",
                "value": "6/Enzyme Search",
                "customization": "set page",
                "customizationValue": ""
              }
            ]
          },
          "database": "neo4j"
        },
        {
          "id": "675dc5a8-ee7e-4058-a359-fa325a9dda75",
          "title": "PDB Results",
          "query": "CALL apoc.when($neodash_max_cognate = \"Best\", 'RETURN [\"Y\"] as cognate_options', 'RETURN [\"Y\", \"N\"] as cognate_options') YIELD value WITH value.cognate_options as cognate_options\nWITH $neodash_entry_pdbentry AS searchString, cognate_options\nMATCH (be:boundEntity)-[:IS_IN_PDB]->(a:entry)\nWHERE toUpper(a.pdbEntry) CONTAINS toUpper(searchString)\nOPTIONAL MATCH (a)<-[:IS_IN_PDB]-(pc:proteinChain)<-[]-(d:domain)\nWHERE d.type = $neodash_domain_type\nWITH *\nOPTIONAL MATCH (be)-[b:HAS_SIMILARITY]->(bl:cognateLigand)\nWHERE b.parityScore >= toFloat($neodash_parity_score_cutoff) AND b.bestCognate in cognate_options\nWITH count(distinct(d)) as d_count, count(distinct(be)) as be_count, a,count(distinct(bl)) as bl_count, count(distinct(be.ligandUniqueID)) as bd_count, a.displayPDBECList as display_ec_list\nRETURN a.pdbEntry as `PDB ID`, \"http://localhost:8080/\" as __iframe, \"Viewer: Select a parity score or domain interaction to start\" as __iframe_header, properties(a) as __pdb_properties, apoc.text.join([item in display_ec_list | \"* \" + item], \"  \\n\") as __ecs, bl_count as __bl_count, d_count as __d_count, be_count as __be_count, bd_count as __bd_count",
          "width": 4,
          "height": 2,
          "x": 4,
          "y": 4,
          "type": "table",
          "selection": {},
          "settings": {
            "actionsRules": [
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "2/PDB Search",
                "customization": "set page",
                "customizationValue": ""
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "PDB ID",
                "customization": "set variable",
                "customizationValue": "entry_pdbentry_1"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__iframe",
                "customization": "set variable",
                "customizationValue": "iframe_url"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__iframe_header",
                "customization": "set variable",
                "customizationValue": "iframe_header"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__d_count",
                "customization": "set variable",
                "customizationValue": "d_count"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__pdb_properties",
                "customization": "set variable",
                "customizationValue": "pdb_properties"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__ecs",
                "customization": "set variable",
                "customizationValue": "pdb_ecs"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__be_count",
                "customization": "set variable",
                "customizationValue": "be_count"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__bl_count",
                "customization": "set variable",
                "customizationValue": "bl_count"
              },
              {
                "condition": "Click",
                "field": "",
                "value": "__bd_count",
                "customization": "set variable",
                "customizationValue": "bd_count"
              }
            ],
            "fullscreenEnabled": true
          },
          "database": "neo4j"
        },
        {
          "id": "b07bc9ad-404f-4143-99e6-d364d29ae9fb",
          "title": "PDB Search",
          "query": "\n\n\n",
          "width": 4,
          "height": 2,
          "x": 0,
          "y": 4,
          "type": "forms",
          "selection": {},
          "settings": {
            "formFields": [
              {
                "type": "Node Property",
                "settings": {
                  "type": "Node Property",
                  "entityType": "entry",
                  "propertyType": "pdbEntry",
                  "propertyTypeDisplay": "pdbEntry",
                  "parameterName": "neodash_entry_pdbentry",
                  "defaultValue": "1b42",
                  "helperText": "PDB ID"
                },
                "query": "MATCH (n:`entry`) \nWHERE toLower(toString(n.`pdbEntry`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`pdbEntry` as value,  n.`pdbEntry` as display ORDER BY size(toString(value)) ASC LIMIT 5"
              }
            ],
            "hasSubmitButton": false,
            "backgroundColor": "#2991E559",
            "fullscreenEnabled": false
          },
          "schema": [],
          "database": "neo4j"
        },
        {
          "id": "35ee75f5-4acd-4c2a-bc7a-6be7a9887926",
          "title": "Bound Entity Results",
          "query": "CALL apoc.when(toLower($neodash_boundentity_query) STARTS WITH \"id:\", 'RETURN \"id\" as search_type, apoc.text.replace($neodash_boundentity_query, \"^id:|^ID:\",\"\") AS search', 'RETURN \"name_db\" as search_type, [part IN split(toUpper($neodash_boundentity_query), \",\")] AS search', {neodash_boundentity_query: $neodash_boundentity_query}) YIELD value \nWITH value.search_type as search_type, value.search as search\nCALL apoc.case([\n  search_type = \"id\", 'MATCH (bd:boundDescriptor {uniqueID : search})<-[r:DESCRIBED_BY]-(be:boundEntity)-[:IS_IN_PDB]-(a:entry) RETURN DISTINCT bd.name AS bd_name, COUNT(DISTINCT(be.uniqueID)) as __be_instances, COUNT(DISTINCT(a.pdbEntry)) as __pdb_instances, properties(bd) as __properties , bd.uniqueID AS __uniqueID, \"http://localhost:8080/smiles_viewer.html?type=smiles&data=\" + apoc.text.urlencode(apoc.convert.toJson({name: bd.name, smiles: bd.descriptor})) as __iframe_url, count(r) as __num_entities ORDER BY __num_entities DESC LIMIT 1000',\n  search_type = \"name_db\", 'MATCH (bd:boundDescriptor)<-[r:DESCRIBED_BY]-(be:boundEntity)-[:IS_IN_PDB]-(a:entry) WHERE ANY(item IN search WHERE ANY(name in bd.name WHERE toUpper(name) CONTAINS item) OR ANY(name in bd.description WHERE toUpper(name) CONTAINS item)) RETURN DISTINCT bd.name AS bd_name, COUNT(DISTINCT(be.uniqueID)) as __be_instances, COUNT(DISTINCT(a.pdbEntry)) as __pdb_instances, properties(bd) as __properties , bd.uniqueID AS __uniqueID, \"http://localhost:8080/smiles_viewer.html?type=smiles&data=\" + apoc.text.urlencode(apoc.convert.toJson({name: bd.name, smiles: bd.descriptor})) as __iframe_url, count(r) as __num_entities ORDER BY __num_entities DESC LIMIT 1000'],\n  \"RETURN NULL\", {search: search}) YIELD value \nWITH value.bd_name as `Bound Entity`, value.__be_instances as __be_instances, value.__pdb_instances as __pdb_instances, value.__properties as __properties, value.__uniqueID as __uniqueID, value.__iframe_url as __iframe_url, value.__num_entities as __num_entities, \"http://m-crown.github.io/ProCogGraph\" as __pdb_lig_cognate_url\nRETURN DISTINCT * ORDER BY __num_entities DESC LIMIT 1000\n\n\n",
          "width": 5,
          "height": 3,
          "x": 12,
          "y": 10,
          "type": "table",
          "selection": {},
          "settings": {
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Bound Entity",
                "value": "__iframe_url",
                "customization": "set variable",
                "customizationValue": "iframe_url_pdbligand"
              },
              {
                "condition": "Click",
                "field": "Bound Entity",
                "value": "__uniqueID",
                "customization": "set variable",
                "customizationValue": "bd_uniqueid"
              },
              {
                "condition": "Click",
                "field": "Bound Entity",
                "value": "__properties",
                "customization": "set variable",
                "customizationValue": "pdb_ligand_properties"
              },
              {
                "condition": "Click",
                "field": "Bound Entity",
                "value": "__be_instances",
                "customization": "set variable",
                "customizationValue": "be_instances"
              },
              {
                "condition": "Click",
                "field": "Bound Entity",
                "value": "__pdb_instances",
                "customization": "set variable",
                "customizationValue": "pdb_instances"
              },
              {
                "condition": "Click",
                "field": "Bound Entity",
                "value": "5/PDB Ligand Search",
                "customization": "set page",
                "customizationValue": ""
              },
              {
                "condition": "Click",
                "field": "Bound Entity",
                "value": "__pdb_lig_cognate_url",
                "customization": "set variable",
                "customizationValue": "pdb_lig_cognate_url"
              }
            ]
          },
          "database": "neo4j"
        },
        {
          "id": "59167529-ce4e-4af5-9a31-daf1eb63c65d",
          "title": "Bound Entity Search",
          "query": "RETURN true;",
          "width": 4,
          "height": 3,
          "x": 8,
          "y": 6,
          "type": "select",
          "selection": {},
          "settings": {
            "formFields": [
              {
                "type": "Free Text",
                "settings": {
                  "type": "Free Text",
                  "entityType": "boundentity_query",
                  "parameterName": "neodash_boundentity_query"
                },
                "query": "RETURN true;"
              }
            ],
            "hasSubmitButton": false,
            "backgroundColor": "#2991E559",
            "type": "Free Text",
            "entityType": "boundentity_query",
            "parameterName": "neodash_boundentity_query",
            "defaultValue": "SAH",
            "helperText": "Bound Entity Name"
          },
          "schema": []
        }
      ]
    },
    {
      "title": "PDB Search",
      "reports": [
        {
          "id": "8d02a5b7-729d-488c-9f10-972225bc273e",
          "title": "`$neodash_pdb_properties['pdbEntry']` Structure Summary",
          "query": "**Title**: `$neodash_pdb_properties[\"title\"]`  \n**Description**: `$neodash_pdb_properties[\"description\"]`  \n**Keywords**: `$neodash_pdb_properties[\"keywords\"]`  \n**View structure:** [PDBe](https://www.ebi.ac.uk/pdbe/entry/pdb/`$neodash_pdb_properties[\"pdbEntry\"]`)  \n**Num Domains:** $neodash_d_count $neodash_domain_type domain(s)  \n**Num Bound Entities:** $neodash_be_count ($neodash_bd_count unique)  \n**Num Cognate Ligands:** $neodash_bl_count ($neodash_parity_score_cutoff cutoff)  \n&nbsp;  \nThe PDB structure has the following assigned EC class(es):  \n$neodash_pdb_ecs",
          "width": 9,
          "height": 4,
          "x": 0,
          "y": 0,
          "type": "text",
          "selection": {},
          "settings": {
            "description": "EC Lists are provided in the format: Assembly chain ID: EC ranges ",
            "refreshButtonEnabled": true
          },
          "schema": []
        },
        {
          "id": "ced7d1ae-349c-48e1-9d57-7727b3a8374f",
          "title": "$neodash_iframe_header",
          "query": "$neodash_iframe_url\n\n\n",
          "width": 12,
          "height": 6,
          "x": 12,
          "y": 4,
          "type": "iframe",
          "selection": {},
          "settings": {
            "fullscreenEnabled": true,
            "downloadImageEnabled": true,
            "description": "TEST12345"
          },
          "schema": []
        },
        {
          "id": "c6627478-2ea4-4050-9c2d-63bddc35bdf0",
          "title": "$neodash_domain_type Domain Interactions",
          "query": "CALL apoc.case([$neodash_max_cognate = \"Best\", 'RETURN [\"Y\"] as cognate_options, \"cognate\" as match_cognate', $neodash_max_cognate = \"Any\", 'RETURN [\"Y\", \"N\"] as cognate_options, \"cognate\" as match_cognate', $neodash_max_cognate = \"All\", 'RETURN [\"Y\", \"N\"] as cognate_options, \"all\" as match_cognate']) YIELD value WITH value.cognate_options as cognate_options, value.match_cognate as match_cognate\nCALL apoc.case([\n      $neodash_domain_type = \"SCOP\", \"RETURN 'Superfamily' as group_level, cognate_options, match_cognate\",\n      $neodash_domain_type = \"CATH\", \"RETURN 'Superfamily' as group_level, cognate_options, match_cognate\",\n      $neodash_domain_type = \"Pfam\", \"RETURN 'Family' as group_level, cognate_options, match_cognate\",\n      $neodash_domain_type = \"Superfamily\", \"RETURN 'Superfamily' as group_level, cognate_options, match_cognate\",\n      $neodash_domain_type = \"Gene3D\", \"RETURN 'Superfamily' as group_level, cognate_options, match_cognate\",\n      $neodash_domain_type = \"SCOP2-SF\", \"RETURN 'Superfamily' as group_level, cognate_options, match_cognate\",\n      $neodash_domain_type = \"SCOP2-FA\", \"RETURN 'Family' as group_level, cognate_options, match_cognate\"],\n      'RETURN NULL', {cognate_options:cognate_options, match_cognate:match_cognate}) YIELD value\nWITH value.group_level as group_level, value.cognate_options as cognate_options, value.match_cognate as match_cognate\nMATCH (e:entry {pdbEntry: $neodash_entry_pdbentry_1})<-[:IS_IN_PDB]-(pc)<-[:IS_IN_PROTEIN_CHAIN]-(d:domain {type: $neodash_domain_type})-[int:INTERACTS_WITH_LIGAND]->(be:boundEntity)-[:IS_IN_PDB]->(e)\nWITH group_level, d.domain AS Domain, d.group as Accession, d.group_description as group_description, round(toFloat(int.domainContactPerc), 2) * 100 as domain_contact_perc, properties(d) as __domain_properties, d.url as __domain_url, apoc.text.capitalize(apoc.text.replace(int.interactionMode, \"_\", \" \")) as `Mode`, SIZE(apoc.convert.toList(int.proteinInterface)) as `# Interacting Residues`, be.displayID AS `PDB Ligand`, min(int.proteinInterface) as min_res, e.pdbEntry as pdbID, apoc.text.urlencode(apoc.convert.toJson({pdb_id: e.pdbEntry, bl_chain: be.boundLigandChain, bl_residues: be.boundLigandResidues, all_interface: int.allProteinInterface, interface_chain: d.assemblyChainID, interface: int.proteinInterface})) as interface_json, be.hetCode as entityID\nRETURN DISTINCT Accession as Accession, Domain as `PDB:Chain:Domain`,`PDB Ligand` , `Mode`, domain_contact_perc + \"% (\" + `# Interacting Residues` + \")\" as `Contact % (# Res.)`, \"http://localhost:8080/pdbe_molstar_viewer.html?data=\" + interface_json as __iframe_url_interface, \"Interface: \" + Domain + \" - \" + `PDB Ligand` as __iframe_header_interface, group_level as __group_level, group_description as __group_description, [NULL] as __domint_entries\nORDER BY `PDB Ligand` ASC, `PDB:Chain:Domain` ASC",
          "width": 12,
          "height": 6,
          "x": 0,
          "y": 4,
          "type": "table",
          "selection": {},
          "settings": {
            "fullscreenEnabled": true,
            "refreshButtonEnabled": true,
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Contact % (# Res.)",
                "value": "__iframe_url_interface",
                "customization": "set variable",
                "customizationValue": "iframe_url"
              },
              {
                "condition": "Click",
                "field": "Contact % (# Res.)",
                "value": "__iframe_header_interface",
                "customization": "set variable",
                "customizationValue": "iframe_header"
              },
              {
                "condition": "Click",
                "field": "Score",
                "value": "__iframe_url_ligand",
                "customization": "set variable",
                "customizationValue": "iframe_url"
              },
              {
                "condition": "Click",
                "field": "Score",
                "value": "__iframe_header_ligand",
                "customization": "set variable",
                "customizationValue": "iframe_header"
              },
              {
                "condition": "Click",
                "field": "Accession",
                "value": "3/Domain Search",
                "customization": "set page",
                "customizationValue": ""
              },
              {
                "condition": "Click",
                "field": "Accession",
                "value": "__group_level",
                "customization": "set variable",
                "customizationValue": "group_level"
              },
              {
                "condition": "Click",
                "field": "Accession",
                "value": "_ssf_id",
                "customization": "set variable",
                "customizationValue": "domain_superfamily_id"
              },
              {
                "condition": "Click",
                "field": "Accession",
                "value": "\"\"",
                "customization": "set variable",
                "customizationValue": "superfamily_cognate_ligand"
              },
              {
                "condition": "Click",
                "field": "Accession",
                "value": "__group_description",
                "customization": "set variable",
                "customizationValue": "domain_desc"
              },
              {
                "condition": "Click",
                "field": "Accession",
                "value": "Accession",
                "customization": "set variable",
                "customizationValue": "domain_group"
              },
              {
                "condition": "Click",
                "field": "Accession",
                "value": "__cognate_ligand_count",
                "customization": "set variable",
                "customizationValue": "domain_bl_count"
              },
              {
                "condition": "Click",
                "field": "",
                "value": "__domint_entries",
                "customization": "set variable",
                "customizationValue": "domint_entries"
              }
            ],
            "wrapContent": true,
            "columnWidthsType": "Relative (%)",
            "columnWidths": "[10,13,15.75,9,11,21.25,7.5,5,7.5]",
            "compact": true,
            "description": "Click on PDB:Chain ID:Domain link to view the domain superfamily context page.  \nClick on the PARITY score to view the PDB Cognate ligand similarity in the panel to the right.  \nClick on the contact percentage to view the PDB ligand - domain interface in the structure, in the panel to the right.  "
          },
          "database": "neo4j"
        },
        {
          "id": "b2a46462-27ef-4aac-9e91-109f510649c3",
          "title": "PDB Ligand Table",
          "query": "CALL apoc.case([$neodash_max_cognate = \"Best\", 'RETURN [\"Y\"] as cognate_options, \"cognate\" as match_cognate', $neodash_max_cognate = \"Any\", 'RETURN [\"Y\", \"N\"] as cognate_options, \"cognate\" as match_cognate', $neodash_max_cognate = \"All\", 'RETURN [\"Y\", \"N\"] as cognate_options, \"all\" as match_cognate']) YIELD value WITH value.cognate_options as cognate_options, value.match_cognate as match_cognate\nMATCH (e:entry {pdbEntry: $neodash_entry_pdbentry_1})<-[:IS_IN_PDB]-(be:boundEntity)\nWITH * CALL {WITH be MATCH (be)-[:DESCRIBED_BY]-(bd:boundDescriptor) RETURN bd.descriptor as descriptor, bd.uniqueID as bd_uid}\nWITH *\nCALL apoc.when(match_cognate = \"cognate\", 'OPTIONAL MATCH (e)<-[IS_IN_PDB]-(be)-[sim:HAS_SIMILARITY]->(bl:cognateLigand) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options RETURN e,be,bl,sim, descriptor, bd_uid','OPTIONAL MATCH (be)-[sim:HAS_SIMILARITY]->(bl:cognateLigand) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options RETURN e,be,bl,sim, descriptor, bd_uid', {cognate_options: cognate_options, e:e, be:be, neodash_parity_score_cutoff:$neodash_parity_score_cutoff, descriptor: descriptor, bd_uid:bd_uid}) YIELD value WITH value.e as e, value.be as be, value.bl as bl, value.sim as sim, value.descriptor as descriptor, value.bd_uid as bd_uid\nWITH * CALL {WITH bd_uid MATCH (bd:boundDescriptor {uniqueID : bd_uid})<-[r:DESCRIBED_BY]-(be:boundEntity)-[:INTERACTS_WITH_LIGAND]-(d:domain {type:$neodash_domain_type})-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) RETURN DISTINCT bd.name AS __bd_name, COUNT(DISTINCT(be.uniqueID)) as __be_instances, COUNT(DISTINCT(a.pdbEntry)) as __pdb_instances, properties(bd) as __bd_properties , bd.uniqueID AS __bd_uniqueID, \"http://localhost:8080/smiles_viewer.html?type=smiles&data=\" + apoc.text.urlencode(apoc.convert.toJson({name: bd.name, smiles: bd.descriptor})) as __bd_iframe_url, count(r) as __be_num_entities ORDER BY __be_num_entities DESC LIMIT 1000 }\nRETURN be.hetCode as `Het Code`, be.description as `Name`, collect(distinct(be.boundMoleculeID)) as `PDB Ligand`,\nbl.name[0] + \" (\" + bl.isCofactor + \")\" as `Cognate Ligand (cofactor)`, toString(round(sim.parityScore,2)) AS `Score`,\n\"id:\" + be.ligandUniqueID as __pdb_ligand,\n\"http://localhost:8080/parity_viewer.html?data=\" + apoc.text.urlencode(apoc.convert.toJson({bl_name: bl.name[0], bl_smiles: bl.canonicalSMILES, parity: round(sim.parityScore, 3), parity_smarts: sim.paritySMARTS, parity_pdb: sim.parityMatchPDB, parity_bl: sim.parityMatchCognate, be_name:be.hetCode, be_smiles:descriptor})) as __iframe_url_ligand, \n\"Parity Score: \" + be.hetCode + \" - \" + bl.name[0] as __iframe_header_ligand,\n\"http://localhost:8080/smiles_viewer.html?type=smiles&data=\" + apoc.text.urlencode(apoc.convert.toJson({name: bl.name[0], smiles: bl.canonicalSMILES})) as __iframe_url_cognate, \nbl.name[0] as __coglig_name,\nproperties(bl) as __bl_properties, \napoc.text.join([db in bl.ligandDB | \"* [\" + db + \"]\" + apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(db, \"_CHEBI:[0-9]+\", \"\"), 'KEGG:', '(https://www.genome.jp/entry/'), 'Pubchem:', '(https://pubchem.ncbi.nlm.nih.gov/compound/'), 'CHEBI:', '(https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:'), 'GlyTouCan:', '(https://glytoucan.org/Structures/Glycans/'), 'RHEA:', '(https://www.rhea-db.org/rhea/'), 'BRENDA:', '(https://www.brenda-enzymes.org/ligand.php?brenda_ligand_id=')], \")  \\n\") + \")\" as __bl_ligand_db, \napoc.text.join(bl.name, \",\") as __bl_names,\n[] as __coglig_group_empty, bl.uniqueID as __bl_uniqueID,  \"ID:\" + bl.uniqueID as __bl_uniqueID_query, __bd_name, __be_instances, __pdb_instances, __bd_properties, __bd_uniqueID, __bd_iframe_url, __be_num_entities, [NULL] as __coglig_domint_entries, [NULL] as __pdb_lig_domint_entries, \"http://localhost:8080/\" as __pdb_lig_cognate_url",
          "width": 15,
          "height": 4,
          "x": 9,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "fullscreenEnabled": true,
            "wrapContent": true,
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Het Code",
                "value": "4/PDB Ligand Search",
                "customization": "set page",
                "customizationValue": ""
              },
              {
                "condition": "Click",
                "field": "Het Code",
                "value": "__pdb_ligand",
                "customization": "set variable",
                "customizationValue": "boundentity_query"
              },
              {
                "condition": "Click",
                "field": "Het Code",
                "value": "__be_instances",
                "customization": "set variable",
                "customizationValue": "be_instances"
              },
              {
                "condition": "Click",
                "field": "Het Code",
                "value": "__bd_uniqueID",
                "customization": "set variable",
                "customizationValue": "bd_uniqueid"
              },
              {
                "condition": "Click",
                "field": "Het Code",
                "value": "__bd_properties",
                "customization": "set variable",
                "customizationValue": "pdb_ligand_properties"
              },
              {
                "condition": "Click",
                "field": "Het Code",
                "value": "__pdb_instances",
                "customization": "set variable",
                "customizationValue": "pdb_instances"
              },
              {
                "condition": "Click",
                "field": "Het Code",
                "value": "__bd_iframe_url",
                "customization": "set variable",
                "customizationValue": "iframe_url_pdb_ligand"
              },
              {
                "condition": "Click",
                "field": "Score",
                "value": "__iframe_url_ligand",
                "customization": "set variable",
                "customizationValue": "iframe_url"
              },
              {
                "condition": "Click",
                "field": "Score",
                "value": "__iframe_header_ligand",
                "customization": "set variable",
                "customizationValue": "iframe_header"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand (cofactor)",
                "value": "__bl_uniqueID_query",
                "customization": "set variable",
                "customizationValue": "biological_ligand_name"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand (cofactor)",
                "value": "__iframe_url_cognate",
                "customization": "set variable",
                "customizationValue": "iframe_url_cognate"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand (cofactor)",
                "value": "4/Cognate Ligand Search",
                "customization": "set page",
                "customizationValue": ""
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand (cofactor)",
                "value": "__bl_properties",
                "customization": "set variable",
                "customizationValue": "bl_properties"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand (cofactor)",
                "value": "__bl_names",
                "customization": "set variable",
                "customizationValue": "bl_names"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand (cofactor)",
                "value": "__bl_ligand_db",
                "customization": "set variable",
                "customizationValue": "bl_liganddb"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand (cofactor)",
                "value": "__coglig_group_empty",
                "customization": "set variable",
                "customizationValue": "coglig_group_pdbs"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand (cofactor)",
                "value": "__bl_uniqueID",
                "customization": "set variable",
                "customizationValue": "bl_query_unique_id"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand (cofactor)",
                "value": "__coglig_name",
                "customization": "set variable",
                "customizationValue": "bl_query_name"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand (cofactor)",
                "value": "__coglig_domint_entries",
                "customization": "set variable",
                "customizationValue": "coglig_domint_entries"
              },
              {
                "condition": "Click",
                "field": "Het Code",
                "value": "__pdb_lig_domint_entries",
                "customization": "set variable",
                "customizationValue": "pdb_lig_domint_entries"
              },
              {
                "condition": "Click",
                "field": "",
                "value": "__pdb_lig_cognate_url",
                "customization": "set variable",
                "customizationValue": "pdb_lig_cognate_url"
              }
            ],
            "compact": true
          },
          "schema": [],
          "database": "neo4j"
        }
      ]
    },
    {
      "title": "Domain Search",
      "reports": [
        {
          "id": "dfaa924e-560e-4691-b77f-2645433bb207",
          "title": "$neodash_group_level $neodash_domain_superfamily_id Report",
          "query": "The domain summaries listed here provide information for $neodash_domain_desc ($neodash_domain_superfamily_id) at $neodash_parity_score_cutoff PARITY score cutoff.  \n&nbsp;  \nThe following tables breakdown the cognate ligands domains within the $neodash_group_level interact with - see Group Interactions table. Click on a cognate ligand in this table to see a list of PDBs containing the domain and cognate ligand.  \nthe context of the interactions that occur (Domain Context table).  \n&nbsp;  \nOften, the number of cognate ligands for a combinatorial interaction will exceed the table size. To view the full set of results, download the table with the button in the bottom right corner.",
          "width": 7,
          "height": 4,
          "x": 3,
          "y": 0,
          "type": "text",
          "selection": {},
          "settings": {
            "downloadImageEnabled": true
          },
          "schema": []
        },
        {
          "id": "54a41ff2-c380-4f91-96a8-0ccecef93966",
          "title": "$neodash_group_level Interactions",
          "query": "CALL apoc.when($neodash_max_cognate = \"Best\", 'RETURN [\"Y\"] as cognate_options', 'RETURN [\"Y\", \"N\"] as cognate_options') YIELD value WITH value.cognate_options as cognate_options\nCALL apoc.case([\n  $neodash_domain_type = \"Pfam\", 'MATCH (bl:cognateLigand)<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:pfamDomain {group: neodash_domain_group}) WHERE sim.parityScore >= toFloat(parity_cutoff) AND sim.bestCognate in cognate_options RETURN DISTINCT bl.name as CognateLigandName, bl.uniqueID as CognateLigandUID, d.description as ssf_desc, SIZE(COLLECT(DISTINCT(d.domain))) as domain_count',\n  $neodash_domain_type = \"SCOP\", 'MATCH (bl:cognateLigand)<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:scopDomain)-[rel:IS_IN_SCOP_FAMILY]->(sf:scopFamily)-[:IS_IN_SCOP_SUPERFAMILY]-(ssf:scopSuperfamily {scopSuperfamily: neodash_domain_group}) WHERE sim.parityScore >= toFloat(parity_cutoff) AND sim.bestCognate in cognate_options RETURN DISTINCT bl.name as CognateLigandName, bl.uniqueID as CognateLigandUID, ssf.description as ssf_desc, SIZE(COLLECT(DISTINCT(d.domain))) as domain_count', \n  $neodash_domain_type= \"CATH\", 'MATCH (bl:cognateLigand)<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:cathDomain)-[rel:IS_IN_CATH_HOMOLOGOUS_SUPERFAMILY]->(ssf:cathHomologousSuperfamily {cathHomologousSuperfamily : neodash_domain_group}) WHERE sim.parityScore >= toFloat(parity_cutoff) AND sim.bestCognate in cognate_options RETURN DISTINCT bl.name as CognateLigandName, bl.uniqueID as CognateLigandUID, ssf.description as ssf_desc, SIZE(COLLECT(DISTINCT(d.domain))) as domain_count',\n  $neodash_domain_type = \"Superfamily\", 'MATCH (d:superfamilyDomain {group: neodash_domain_group})-[int:INTERACTS_WITH_LIGAND]->(be:boundEntity)-[sim:HAS_SIMILARITY]->(bl:cognateLigand) WHERE sim.parityScore >= toFloat(parity_cutoff) AND sim.bestCognate in cognate_options RETURN DISTINCT bl.name as CognateLigandName, bl.uniqueID as CognateLigandUID, d.description as ssf_desc, SIZE(COLLECT(DISTINCT(d.domain))) as domain_count',\n  $neodash_domain_type = \"Gene3D\", 'MATCH (d:gene3dDomain {group: neodash_domain_group})-[int:INTERACTS_WITH_LIGAND]->(be:boundEntity)-[sim:HAS_SIMILARITY]->(bl:cognateLigand) WHERE sim.parityScore >= toFloat(parity_cutoff) AND sim.bestCognate in cognate_options RETURN DISTINCT bl.name as CognateLigandName, bl.uniqueID as CognateLigandUID, d.description as ssf_desc, SIZE(COLLECT(DISTINCT(d.domain))) as domain_count',\n  $neodash_domain_type = \"SCOP2-SF\", 'MATCH (ssf:scop2Superfamily {scop2Superfamily: neodash_domain_group}<-[:IS_IN_SCOP2_SUPERFAMILY]-(d:scop2sfDomain)-[int:INTERACTS_WITH_LIGAND]->(be:boundEntity)-[sim:HAS_SIMILARITY]->(bl:cognateLigand) WHERE sim.parityScore >= toFloat(parity_cutoff) AND sim.bestCognate in cognate_options RETURN DISTINCT bl.name as CognateLigandName, bl.uniqueID as CognateLigandUID, ssf.scop2Superfamily as ssf_desc, SIZE(COLLECT(DISTINCT(d.domain))) as domain_count',\n  $neodash_domain_type = \"SCOP2-FA\", 'MATCH (ssf:scop2Family {scop2Family: neodash_domain_group})<-[:IS_IN_SCOP2_FAMILY]-(d:scop2faDomain)-[int:INTERACTS_WITH_LIGAND]->(be:boundEntity)-[sim:HAS_SIMILARITY]->(bl:cognateLigand) WHERE sim.parityScore >= toFloat(parity_cutoff) AND sim.bestCognate in cognate_options RETURN DISTINCT bl.name as CognateLigandName, bl.uniqueID as CognateLigandUID, ssf.scop2Family as ssf_desc, SIZE(COLLECT(DISTINCT(d.domain))) as domain_count'],\n'RETURN NULL', {neodash_domain_type: $neodash_domain_type, parity_cutoff: $neodash_parity_score_cutoff, cognate_options: cognate_options, neodash_domain_group: $neodash_domain_group}) YIELD value\nWITH value.CognateLigandName[0] as `Cognate Ligand Name`, value.CognateLigandUID as CognateLigandUID, value.ssf_desc as Superfamily, value.domain_count as __domains\nRETURN `Cognate Ligand Name`, __domains,  CognateLigandUID as __buniqueid ORDER BY __domains DESC",
          "width": 7,
          "height": 4,
          "x": 10,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "fullscreenEnabled": true,
            "columnWidths": "[4,1]",
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Cognate Ligand Name",
                "value": "__buniqueid",
                "customization": "set variable",
                "customizationValue": "superfamily_cognate_ligand"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand Name",
                "value": "Cognate Ligand Name",
                "customization": "set variable",
                "customizationValue": "superfamily_cognate_ligand_name"
              }
            ],
            "compact": true,
            "description": "The cognate ligands that domains of the given group (e.g. Homologous Superfamily for CATH) interact with, and the number of domains that interact."
          },
          "schema": [],
          "database": "neo4j"
        },
        {
          "id": "8e27ca41-f7ae-4451-b349-d1d3d63a1674",
          "title": "CogLig PDBs",
          "query": "CALL apoc.when($neodash_max_cognate = \"Best\", 'RETURN [\"Y\"] as cognate_options', 'RETURN [\"Y\", \"N\"] as cognate_options') YIELD value WITH value.cognate_options as cognate_options\nCALL apoc.case([\n  $neodash_domain_type = \"Pfam\", 'MATCH (b:cognateLigand {uniqueID: cognate_ligand_id})<-[sim:HAS_SIMILARITY]-(bl:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:pfamDomain {pfamAccession: ssf_desc}) WHERE sim.parityScore >= toFloat(parity_score_cutoff) AND sim.bestCognate in cognate_options WITH d, cognate_options MATCH (d)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) RETURN DISTINCT a as a, cognate_options as cognate_options', \n  $neodash_domain_type = \"SCOP\", 'MATCH (b:cognateLigand {uniqueID: cognate_ligand_id})<-[sim:HAS_SIMILARITY]-(bl:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:scopDomain)-[rel:IS_IN_SCOP_FAMILY]->(sf:scopFamily)-[:IS_IN_SCOP_SUPERFAMILY]-(ssf:scopSuperfamily {description : ssf_desc}) WHERE sim.parityScore >= toFloat(parity_score_cutoff) AND sim.bestCognate in cognate_options WITH d, cognate_options MATCH (d)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) RETURN DISTINCT a as a, cognate_options as cognate_options',  \n  $neodash_domain_type = \"CATH\", 'MATCH (b:cognateLigand {uniqueID: cognate_ligand_id})<-[sim:HAS_SIMILARITY]-(bl:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:cathDomain)-[rel:IS_IN_CATH_HOMOLOGOUS_SUPERFAMILY]->(ssf:cathHomologousSuperfamily {cathHomologousSuperfamily : ssf_desc}) WHERE sim.parityScore >= toFloat(parity_score_cutoff) AND sim.bestCognate in cognate_options WITH d, cognate_options MATCH (d)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) RETURN DISTINCT a as a, cognate_options as cognate_options',\n  $neodash_domain_type = \"Gene3D\", 'MATCH (b:cognateLigand {uniqueID: cognate_ligand_id})<-[sim:HAS_SIMILARITY]-(bl:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:gene3dDomain {gene3dAccession: ssf_desc}) WHERE sim.parityScore >= toFloat(parity_score_cutoff) AND sim.bestCognate in cognate_options WITH d, cognate_options MATCH (d)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) RETURN DISTINCT a as a, cognate_options as cognate_options',\n  $neodash_domain_type = \"Superfamily\", 'MATCH (b:cognateLigand {uniqueID: cognate_ligand_id})<-[sim:HAS_SIMILARITY]-(bl:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:superfamilyDomain {superfamilyAccession: ssf_desc}) WHERE sim.parityScore >= toFloat(parity_score_cutoff) AND sim.bestCognate in cognate_options WITH d, cognate_options MATCH (d)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) RETURN DISTINCT a as a, cognate_options as cognate_options',\n  $neodash_domain_type = \"SCOP2-FA\", 'MATCH (b:cognateLigand {uniqueID: cognate_ligand_id})<-[sim:HAS_SIMILARITY]-(bl:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:scop2faDomain)-[:IS_IN_SCOP2_FAMILY]->(ssf:scop2Family {scop2Family: ssf_desc}) WHERE sim.parityScore >= toFloat(parity_score_cutoff) AND sim.bestCognate in cognate_options WITH d, cognate_options MATCH (d)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) RETURN DISTINCT a as a, cognate_options as cognate_options',\n  $neodash_domain_type = \"SCOP2-SF\", 'MATCH (b:cognateLigand {uniqueID: cognate_ligand_id})<-[sim:HAS_SIMILARITY]-(bl:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:scop2sfDomain)-[:IS_IN_SCOP2_SUPERFAMILY]->(ssf:scop2Superfamily {scop2Superfamily: ssf_desc}) WHERE sim.parityScore >= toFloat(parity_score_cutoff) AND sim.bestCognate in cognate_options WITH d, cognate_options MATCH (d)-[:IS_IN_PROTEIN_CHAIN]-(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) RETURN DISTINCT a as a, cognate_options as cognate_options'], \n'RETURN NULL as pdbEntry', {parity_score_cutoff: $neodash_parity_score_cutoff, ssf_desc: $neodash_domain_superfamily_id, cognate_ligand_id: $neodash_superfamily_cognate_ligand, cognate_options: cognate_options}) YIELD value\nWITH value.a as a, value.cognate_options as cognate_options\nMATCH (a)<-[:IS_IN_PDB]-(pc:proteinChain)<-[:IS_IN_PROTEIN_CHAIN]-(d:domain {type : $neodash_domain_type})-[:INTERACTS_WITH_LIGAND]->(be:boundEntity)-[b:HAS_SIMILARITY]->(bl:cognateLigand)\nWHERE b.parityScore >= toFloat($neodash_parity_score_cutoff) AND b.bestCognate in cognate_options\nWITH count(distinct(d)) as d_count, count(distinct(be)) as be_count, a,count(distinct(bl)) as bl_count, a.displayPDBECList as display_ec_list\nRETURN a.pdbEntry as `PDB ID`,\"http://m-crown.github.io/ProCogGraph\" as __iframe, \"Viewer: Select a parity score or domain interaction to start\" as __iframe_header, properties(a) as __pdb_properties, apoc.text.join([item in display_ec_list | \"* \" + item], \"  \\n\") as __ecs, bl_count as __bl_count, d_count as __d_count, be_count as __be_count ORDER BY `PDB ID` ASC",
          "width": 4,
          "height": 4,
          "x": 17,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "fullscreenEnabled": true,
            "actionsRules": [
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "PDB ID",
                "customization": "set variable",
                "customizationValue": "entry_pdbentry_1"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "1/PDB Search",
                "customization": "set page",
                "customizationValue": ""
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__pdb_properties",
                "customization": "set variable",
                "customizationValue": "pdb_properties"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__iframe",
                "customization": "set variable",
                "customizationValue": "iframe_url"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__ecs",
                "customization": "set variable",
                "customizationValue": "pdb_ecs"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__d_count",
                "customization": "set variable",
                "customizationValue": "d_count"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__bl_count",
                "customization": "set variable",
                "customizationValue": "bl_count"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__be_count",
                "customization": "set variable",
                "customizationValue": "be_count"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__iframe_header",
                "customization": "set variable",
                "customizationValue": "iframe_header"
              }
            ],
            "compact": true,
            "noDataMessage": "Select a Cognate Ligand From the Group Interactions table to get started."
          },
          "database": "neo4j"
        },
        {
          "id": "bc884377-a0bd-4ecf-858a-4da890dd0e66",
          "title": "$neodash_group_level Combinatorial Interactions",
          "query": "CALL apoc.case([$neodash_max_cognate = \"Best\", 'RETURN [\"Y\"] as cognate_options, \"cognate\" as match_cognate', $neodash_max_cognate = \"Any\", 'RETURN [\"Y\", \"N\"] as cognate_options, \"cognate\" as match_cognate', $neodash_max_cognate = \"All\", 'RETURN [\"Y\", \"N\"] as cognate_options, \"all\" as match_cognate']) YIELD value \nWITH value.cognate_options as cognate_options, value.match_cognate as match_cognate\nCALL apoc.case([\n      $neodash_domain_type = \"SCOP\", \"MATCH (cl:cognateLigand)<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:scopDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options AND int.interactionMode <> 'minor' WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\",\n      $neodash_domain_type = \"CATH\", \"MATCH (cl:cognateLigand)<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:cathDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options AND int.interactionMode <> 'minor' WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\",\n      $neodash_domain_type = \"Pfam\", \"MATCH (cl:cognateLigand)<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:pfamDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options AND int.interactionMode <> 'minor' WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\",\n      $neodash_domain_type = \"Superfamily\", \"MATCH (cl:cognateLigand)<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:superfamilyDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options AND int.interactionMode <> 'minor' WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\",\n      $neodash_domain_type = \"Gene3D\", \"MATCH (cl:cognateLigand)<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:gene3dDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options AND int.interactionMode <> 'minor' WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\",\n      $neodash_domain_type = \"SCOP2-SF\", \"MATCH (cl:cognateLigand)<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:scop2SfDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options AND int.interactionMode <> 'minor' WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\",\n      $neodash_domain_type = \"SCOP2-FA\", \"MATCH (cl:cognateLigand)<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:scop2FaDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options AND int.interactionMode <> 'minor' WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\"],\n      'RETURN NULL', {cognate_options:cognate_options, match_cognate:match_cognate, neodash_parity_score_cutoff:$neodash_parity_score_cutoff}) YIELD value\nWITH value.domInt as domInt, value.cognate_ligands as cognate_ligands, value.be_ligands as __be_ligands, value.pdbs as __pdbs\nWHERE ANY(item in domInt WHERE item CONTAINS $neodash_domain_group + ':')\nRETURN domInt as `Combinatorial Domain Interaction`, cognate_ligands as `Cognate Ligand(s)`, __be_ligands, __pdbs",
          "width": 14,
          "height": 6,
          "x": 3,
          "y": 4,
          "type": "table",
          "selection": {},
          "settings": {
            "wrapContent": false,
            "fullscreenEnabled": true,
            "allowDownload": true,
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Combinatorial Domain Interaction",
                "value": "__pdbs",
                "customization": "set variable",
                "customizationValue": "domint_entries"
              },
              {
                "condition": "Click",
                "field": "Combinatorial Domain Interaction",
                "value": "Combinatorial Domain Interaction",
                "customization": "set variable",
                "customizationValue": "domint"
              }
            ]
          },
          "database": "neo4j"
        },
        {
          "id": "f05d3f5e-1266-45b1-bbc8-740b64e2a160",
          "title": "Interaction PDBs",
          "query": "CALL apoc.when($neodash_max_cognate = \"Best\", 'RETURN [\"Y\"] as cognate_options', 'RETURN [\"Y\", \"N\"] as cognate_options') YIELD value WITH value.cognate_options as cognate_options\nWITH cognate_options\nMATCH (be:boundEntity)-[:IS_IN_PDB]->(a:entry)\nWHERE a.pdbEntry in $neodash_domint_entries\nOPTIONAL MATCH (a)<-[:IS_IN_PDB]-(pc:proteinChain)<-[]-(d:domain)\nWHERE d.type = $neodash_domain_type\nWITH *\nOPTIONAL MATCH (be)-[b:HAS_SIMILARITY]->(bl:cognateLigand)\nWHERE b.parityScore >= toFloat($neodash_parity_score_cutoff) AND b.bestCognate in cognate_options\nWITH count(distinct(d)) as d_count, count(distinct(be)) as be_count, a,count(distinct(bl)) as bl_count, count(distinct(be.ligandUniqueID)) as bd_count, a.displayPDBECList as display_ec_list\nRETURN a.pdbEntry as `PDB ID`, \"http://localhost:8080/\" as __iframe, \"Viewer: Select a parity score or domain interaction to start\" as __iframe_header, properties(a) as __pdb_properties, apoc.text.join([item in display_ec_list | \"* \" + item], \"  \\n\") as __ecs, bl_count as __bl_count, d_count as __d_count, be_count as __be_count, bd_count as __bd_count",
          "width": 4,
          "height": 6,
          "x": 17,
          "y": 4,
          "type": "table",
          "selection": {},
          "settings": {
            "actionsRules": [
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "2/PDB Search",
                "customization": "set page",
                "customizationValue": ""
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "PDB ID",
                "customization": "set variable",
                "customizationValue": "entry_pdbentry_1"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__iframe",
                "customization": "set variable",
                "customizationValue": "iframe_url"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__iframe_header",
                "customization": "set variable",
                "customizationValue": "iframe_header"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__d_count",
                "customization": "set variable",
                "customizationValue": "d_count"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__pdb_properties",
                "customization": "set variable",
                "customizationValue": "pdb_properties"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__ecs",
                "customization": "set variable",
                "customizationValue": "pdb_ecs"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__be_count",
                "customization": "set variable",
                "customizationValue": "be_count"
              },
              {
                "condition": "Click",
                "field": "",
                "value": "__bl_count",
                "customization": "set variable",
                "customizationValue": "bl_count"
              },
              {
                "condition": "Click",
                "field": "",
                "value": "__bd_count",
                "customization": "set variable",
                "customizationValue": "bd_count"
              }
            ],
            "noDataMessage": "Select a Combinatorial Interaction to list PDBs containing the interaction"
          }
        }
      ]
    },
    {
      "title": "Cognate Ligand Search",
      "reports": [
        {
          "id": "27a71776-483d-40aa-b5fd-142e9813b0f6",
          "title": "$neodash_bl_query_name Combinatorial Interactions",
          "query": "CALL apoc.case([$neodash_max_cognate = \"Best\", 'RETURN [\"Y\"] as cognate_options, \"cognate\" as match_cognate', $neodash_max_cognate = \"Any\", 'RETURN [\"Y\", \"N\"] as cognate_options, \"cognate\" as match_cognate', $neodash_max_cognate = \"All\", 'RETURN [\"Y\", \"N\"] as cognate_options, \"all\" as match_cognate']) YIELD value WITH value.cognate_options as cognate_options, value.match_cognate as match_cognate\nCALL apoc.case([\n      $neodash_domain_type = \"SCOP\", \"MATCH (cl:cognateLigand {uniqueID: neodash_bl_query_unique_id})<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:scopDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\",\n      $neodash_domain_type = \"CATH\", \"MATCH (cl:cognateLigand {uniqueID: neodash_bl_query_unique_id})<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:cathDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\",\n      $neodash_domain_type = \"Pfam\", \"MATCH (cl:cognateLigand {uniqueID: neodash_bl_query_unique_id})<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:pfamDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\",\n      $neodash_domain_type = \"Superfamily\", \"MATCH (cl:cognateLigand {uniqueID: neodash_bl_query_unique_id})<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:superfamilyDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\",\n      $neodash_domain_type = \"Gene3D\", \"MATCH (cl:cognateLigand {uniqueID: neodash_bl_query_unique_id})<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:gene3dDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\",\n      $neodash_domain_type = \"SCOP2-SF\", \"MATCH (cl:cognateLigand {uniqueID: neodash_bl_query_unique_id})<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:scop2SfDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\",\n      $neodash_domain_type = \"SCOP2-FA\", \"MATCH (cl:cognateLigand {uniqueID: neodash_bl_query_unique_id})<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:scop2FaDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\"],\n      'RETURN NULL', {neodash_bl_query_unique_id: $neodash_bl_query_unique_id,cognate_options:cognate_options, match_cognate:match_cognate, neodash_parity_score_cutoff:$neodash_parity_score_cutoff}) YIELD value\nWITH value.domInt as domInt, value.cognate_ligands as cognate_ligands, value.be_ligands as __be_ligands, value.pdbs as __pdbs\nRETURN domInt as `Combinatorial Domain Interaction`, __be_ligands, __pdbs",
          "width": 12,
          "height": 4,
          "x": 6,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Combinatorial Domain Interaction",
                "value": "__pdbs",
                "customization": "set variable",
                "customizationValue": "coglig_domint_entries"
              }
            ],
            "noDataMessage": "No matching domains. Try altering the global ProCogGraph parity score on the home page.",
            "columnWidths": "[50,40, 10]",
            "fullscreenEnabled": true
          },
          "schema": [],
          "database": "neo4j"
        },
        {
          "id": "3e0a189c-ddbe-4008-a21f-637e48b1616c",
          "title": "PDBs with CogLig",
          "query": "CALL apoc.when($neodash_max_cognate = \"Best\", 'RETURN [\"Y\"] as cognate_options', 'RETURN [\"Y\", \"N\"] as cognate_options') YIELD value WITH value.cognate_options as cognate_options\nMATCH (bl:cognateLigand {uniqueID: toString($neodash_bl_query_unique_id)})<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[:INTERACTS_WITH_LIGAND]-(d:domain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry)\nWHERE d.type = $neodash_domain_type AND sim.parityScore >= toFloat($neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options\nWITH a, cognate_options\nLIMIT 1000\nMATCH (a)<-[:IS_IN_PDB]-(be:boundEntity)\nOPTIONAL MATCH (a)<-[:IS_IN_PDB]-(pc:proteinChain)<-[:IS_IN_PROTEIN_CHAIN]-(d:domain)\nWHERE d.type = $neodash_domain_type\nWITH *\nOPTIONAL MATCH (be)-[b:HAS_SIMILARITY]->(bl:cognateLigand)\nWHERE b.parityScore >= toFloat($neodash_parity_score_cutoff) AND b.bestCognate in cognate_options\nWITH count(distinct(d)) as d_count, count(distinct(be)) as be_count, a,count(distinct(bl)) as bl_count, a.displayPDBECList as display_ec_list\nRETURN a.pdbEntry as `PDB ID`,\"http://localhost:8080/procogdash/web/default.html\" as __iframe, \"Viewer: Select a parity score or domain interaction to start\" as __iframe_header, properties(a) as __pdb_properties, apoc.text.join([item in display_ec_list | \"* \" + item], \"  \\n\") as __ecs, bl_count as __bl_count, d_count as __d_count, be_count as __be_count",
          "width": 4,
          "height": 4,
          "x": 6,
          "y": 4,
          "type": "table",
          "selection": {},
          "settings": {
            "compact": true,
            "allowDownload": true,
            "actionsRules": [
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "1/PDB Search",
                "customization": "set page",
                "customizationValue": ""
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "PDB ID",
                "customization": "set variable",
                "customizationValue": "entry_pdbentry_1"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__bl_count",
                "customization": "set variable",
                "customizationValue": "bl_count"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__pdb_properties",
                "customization": "set variable",
                "customizationValue": "pdb_properties"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__ecs",
                "customization": "set variable",
                "customizationValue": "pdb_ecs"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__d_count",
                "customization": "set variable",
                "customizationValue": "d_count"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__be_count",
                "customization": "set variable",
                "customizationValue": "be_count"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__iframe",
                "customization": "set variable",
                "customizationValue": "iframe_url"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__iframe_header",
                "customization": "set variable",
                "customizationValue": "iframe_header"
              }
            ],
            "fullscreenEnabled": true
          },
          "schema": [],
          "database": "neo4j"
        },
        {
          "id": "c3a4387b-5bd4-4bc8-a2b0-becf214475ec",
          "title": "`$neodash_bl_properties[name][0]` Summary",
          "query": "Table 1 below lists the domains (at superfamily level) known to interact with `$neodash_bl_properties[\"name\"][0]`, their interaction mode and the number of PDB structures in which this ligand is found interaction with this domain.  \n&nbsp;  \nUse the PDB entry list in the bottom right to explore these structures individually.\n&nbsp;  \nThe cognate ligand `$neodash_bl_properties[\"name\"][0]` is present in the following databases:\n&nbsp; \n$neodash_bl_liganddb  ",
          "width": 6,
          "height": 4,
          "x": 0,
          "y": 0,
          "type": "text",
          "selection": {},
          "settings": {},
          "schema": []
        },
        {
          "id": "a19684cb-f532-4e5f-9776-ff5185aa5aba",
          "title": "Structure",
          "query": "$neodash_iframe_url_cognate\n\n\n",
          "width": 6,
          "height": 4,
          "x": 0,
          "y": 4,
          "type": "iframe",
          "selection": {},
          "settings": {
            "fullscreenEnabled": true
          },
          "schema": []
        },
        {
          "id": "27a71776-483d-40aa-b5fd-142e9813b0f6",
          "title": "$neodash_bl_query_name Combinatorial Interactions",
          "query": "CALL apoc.case([$neodash_max_cognate = \"Best\", 'RETURN [\"Y\"] as cognate_options, \"cognate\" as match_cognate', $neodash_max_cognate = \"Any\", 'RETURN [\"Y\", \"N\"] as cognate_options, \"cognate\" as match_cognate', $neodash_max_cognate = \"All\", 'RETURN [\"Y\", \"N\"] as cognate_options, \"all\" as match_cognate']) YIELD value WITH value.cognate_options as cognate_options, value.match_cognate as match_cognate\nCALL apoc.case([\n      $neodash_domain_type = \"SCOP\", \"MATCH (cl:cognateLigand {uniqueID: neodash_bl_query_unique_id})<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:scopDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\",\n      $neodash_domain_type = \"CATH\", \"MATCH (cl:cognateLigand {uniqueID: neodash_bl_query_unique_id})<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:cathDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\",\n      $neodash_domain_type = \"Pfam\", \"MATCH (cl:cognateLigand {uniqueID: neodash_bl_query_unique_id})<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:pfamDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\",\n      $neodash_domain_type = \"Superfamily\", \"MATCH (cl:cognateLigand {uniqueID: neodash_bl_query_unique_id})<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:superfamilyDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\",\n      $neodash_domain_type = \"Gene3D\", \"MATCH (cl:cognateLigand {uniqueID: neodash_bl_query_unique_id})<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:gene3dDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\",\n      $neodash_domain_type = \"SCOP2-SF\", \"MATCH (cl:cognateLigand {uniqueID: neodash_bl_query_unique_id})<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:scop2SfDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\",\n      $neodash_domain_type = \"SCOP2-FA\", \"MATCH (cl:cognateLigand {uniqueID: neodash_bl_query_unique_id})<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[int:INTERACTS_WITH_LIGAND]-(d:scop2FaDomain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry) WHERE sim.parityScore >= toFloat(neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options WITH cl.uniqueID as clUID, cl.name[0] as clName, be.uniqueID as beUID, a.pdbEntry as pdb, COLLECT(d.group + ':' + int.interactionMode) AS domInt RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(clName)) as cognate_ligands, COLLECT(DISTINCT(beUID)) as be_ligands, COLLECT(DISTINCT(pdb)) as pdbs\"],\n      'RETURN NULL', {neodash_bl_query_unique_id: $neodash_bl_query_unique_id,cognate_options:cognate_options, match_cognate:match_cognate, neodash_parity_score_cutoff:$neodash_parity_score_cutoff}) YIELD value\nWITH value.domInt as domInt, value.cognate_ligands as cognate_ligands, value.be_ligands as __be_ligands, value.pdbs as __pdbs\nRETURN domInt as `Combinatorial Domain Interaction`, __be_ligands, __pdbs",
          "width": 12,
          "height": 4,
          "x": 6,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Combinatorial Domain Interaction",
                "value": "__pdbs",
                "customization": "set variable",
                "customizationValue": "coglig_domint_entries"
              }
            ],
            "noDataMessage": "No matching domains. Try altering the global ProCogGraph parity score on the home page.",
            "columnWidths": "[50,40, 10]",
            "fullscreenEnabled": true
          },
          "schema": [],
          "database": "neo4j"
        },
        {
          "id": "3e0a189c-ddbe-4008-a21f-637e48b1616c",
          "title": "PDBs with CogLig",
          "query": "CALL apoc.when($neodash_max_cognate = \"Best\", 'RETURN [\"Y\"] as cognate_options', 'RETURN [\"Y\", \"N\"] as cognate_options') YIELD value WITH value.cognate_options as cognate_options\nMATCH (bl:cognateLigand {uniqueID: toString($neodash_bl_query_unique_id)})<-[sim:HAS_SIMILARITY]-(be:boundEntity)<-[:INTERACTS_WITH_LIGAND]-(d:domain)-[:IS_IN_PROTEIN_CHAIN]->(pc:proteinChain)-[:IS_IN_PDB]->(a:entry)\nWHERE d.type = $neodash_domain_type AND sim.parityScore >= toFloat($neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options\nWITH a, cognate_options\nLIMIT 1000\nMATCH (a)<-[:IS_IN_PDB]-(be:boundEntity)\nOPTIONAL MATCH (a)<-[:IS_IN_PDB]-(pc:proteinChain)<-[:IS_IN_PROTEIN_CHAIN]-(d:domain)\nWHERE d.type = $neodash_domain_type\nWITH *\nOPTIONAL MATCH (be)-[b:HAS_SIMILARITY]->(bl:cognateLigand)\nWHERE b.parityScore >= toFloat($neodash_parity_score_cutoff) AND b.bestCognate in cognate_options\nWITH count(distinct(d)) as d_count, count(distinct(be)) as be_count, a,count(distinct(bl)) as bl_count, a.displayPDBECList as display_ec_list\nRETURN a.pdbEntry as `PDB ID`,\"http://localhost:8080/procogdash/web/default.html\" as __iframe, \"Viewer: Select a parity score or domain interaction to start\" as __iframe_header, properties(a) as __pdb_properties, apoc.text.join([item in display_ec_list | \"* \" + item], \"  \\n\") as __ecs, bl_count as __bl_count, d_count as __d_count, be_count as __be_count",
          "width": 4,
          "height": 4,
          "x": 6,
          "y": 4,
          "type": "table",
          "selection": {},
          "settings": {
            "compact": true,
            "allowDownload": true,
            "actionsRules": [
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "1/PDB Search",
                "customization": "set page",
                "customizationValue": ""
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "PDB ID",
                "customization": "set variable",
                "customizationValue": "entry_pdbentry_1"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__bl_count",
                "customization": "set variable",
                "customizationValue": "bl_count"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__pdb_properties",
                "customization": "set variable",
                "customizationValue": "pdb_properties"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__ecs",
                "customization": "set variable",
                "customizationValue": "pdb_ecs"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__d_count",
                "customization": "set variable",
                "customizationValue": "d_count"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__be_count",
                "customization": "set variable",
                "customizationValue": "be_count"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__iframe",
                "customization": "set variable",
                "customizationValue": "iframe_url"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__iframe_header",
                "customization": "set variable",
                "customizationValue": "iframe_header"
              }
            ],
            "fullscreenEnabled": true
          },
          "schema": [],
          "database": "neo4j"
        },
        {
          "id": "c3a4387b-5bd4-4bc8-a2b0-becf214475ec",
          "title": "`$neodash_bl_properties[name][0]` Summary",
          "query": "Table 1 below lists the domains (at superfamily level) known to interact with `$neodash_bl_properties[\"name\"][0]`, their interaction mode and the number of PDB structures in which this ligand is found interaction with this domain.  \n&nbsp;  \nUse the PDB entry list in the bottom right to explore these structures individually.\n&nbsp;  \nThe cognate ligand `$neodash_bl_properties[\"name\"][0]` is present in the following databases:\n&nbsp; \n$neodash_bl_liganddb  ",
          "width": 6,
          "height": 4,
          "x": 0,
          "y": 0,
          "type": "text",
          "selection": {},
          "settings": {},
          "schema": []
        },
        {
          "id": "a19684cb-f532-4e5f-9776-ff5185aa5aba",
          "title": "Structure",
          "query": "$neodash_iframe_url_cognate\n\n\n",
          "width": 6,
          "height": 4,
          "x": 0,
          "y": 4,
          "type": "iframe",
          "selection": {},
          "settings": {
            "fullscreenEnabled": true
          },
          "schema": []
        },
        {
          "id": "0949729c-239a-45f0-adb2-d46b49dcd673",
          "title": "Interaction PDBs",
          "query": "CALL apoc.when($neodash_max_cognate = \"Best\", 'RETURN [\"Y\"] as cognate_options', 'RETURN [\"Y\", \"N\"] as cognate_options') YIELD value WITH value.cognate_options as cognate_options\nWITH cognate_options\nMATCH (be:boundEntity)-[:IS_IN_PDB]->(a:entry)\nWHERE a.pdbEntry in $neodash_coglig_domint_entries\nOPTIONAL MATCH (a)<-[:IS_IN_PDB]-(pc:proteinChain)<-[]-(d:domain)\nWHERE d.type = $neodash_domain_type\nWITH *\nOPTIONAL MATCH (be)-[b:HAS_SIMILARITY]->(bl:cognateLigand)\nWHERE b.parityScore >= toFloat($neodash_parity_score_cutoff) AND b.bestCognate in cognate_options\nWITH count(distinct(d)) as d_count, count(distinct(be)) as be_count, a,count(distinct(bl)) as bl_count, count(distinct(be.ligandUniqueID)) as bd_count, a.displayPDBECList as display_ec_list\nRETURN a.pdbEntry as `PDB ID`, \"http://localhost:8080/\" as __iframe, \"Viewer: Select a parity score or domain interaction to start\" as __iframe_header, properties(a) as __pdb_properties, apoc.text.join([item in display_ec_list | \"* \" + item], \"  \\n\") as __ecs, bl_count as __bl_count, d_count as __d_count, be_count as __be_count, bd_count as __bd_count",
          "width": 4,
          "height": 4,
          "x": 18,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "actionsRules": [
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "2/PDB Search",
                "customization": "set page",
                "customizationValue": ""
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "PDB ID",
                "customization": "set variable",
                "customizationValue": "entry_pdbentry_1"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__iframe",
                "customization": "set variable",
                "customizationValue": "iframe_url"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__iframe_header",
                "customization": "set variable",
                "customizationValue": "iframe_header"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__pdb_properties",
                "customization": "set variable",
                "customizationValue": "pdb_properties"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__ecs",
                "customization": "set variable",
                "customizationValue": "pdb_ecs"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__bl_count",
                "customization": "set variable",
                "customizationValue": "bl_count"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__d_count",
                "customization": "set variable",
                "customizationValue": "d_count"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__be_count",
                "customization": "set variable",
                "customizationValue": "be_count"
              }
            ],
            "compact": true,
            "noDataMessage": "Select a Combinatorial Interaction to see PDBs containing the interaction",
            "wrapContent": true
          },
          "schema": [],
          "database": "neo4j"
        }
      ]
    },
    {
      "title": "PDB Ligand Search",
      "reports": [
        {
          "id": "22e37cdd-39f7-4122-a2ef-4a5d59f551da",
          "title": "Interaction PDBs",
          "query": "CALL apoc.when($neodash_max_cognate = \"Best\", 'RETURN [\"Y\"] as cognate_options', 'RETURN [\"Y\", \"N\"] as cognate_options') YIELD value WITH value.cognate_options as cognate_options\nWITH cognate_options\nMATCH (be:boundEntity)-[:IS_IN_PDB]->(a:entry)\nWHERE a.pdbEntry in $neodash_pdb_lig_domint_entries\nOPTIONAL MATCH (a)<-[:IS_IN_PDB]-(pc:proteinChain)<-[]-(d:domain)\nWHERE d.type = $neodash_domain_type\nWITH *\nOPTIONAL MATCH (be)-[b:HAS_SIMILARITY]->(bl:cognateLigand)\nWHERE b.parityScore >= toFloat($neodash_parity_score_cutoff) AND b.bestCognate in cognate_options\nWITH count(distinct(d)) as d_count, count(distinct(be)) as be_count, a,count(distinct(bl)) as bl_count, count(distinct(be.ligandUniqueID)) as bd_count, a.displayPDBECList as display_ec_list\nRETURN a.pdbEntry as `PDB ID`, \"http://localhost:8080/\" as __iframe, \"Viewer: Select a parity score or domain interaction to start\" as __iframe_header, properties(a) as __pdb_properties, apoc.text.join([item in display_ec_list | \"* \" + item], \"  \\n\") as __ecs, bl_count as __bl_count, d_count as __d_count, be_count as __be_count, bd_count as __bd_count",
          "width": 4,
          "height": 5,
          "x": 20,
          "y": 6,
          "type": "table",
          "selection": {},
          "settings": {
            "allowDownload": true,
            "actionsRules": [
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "PDB Entry",
                "customization": "set variable",
                "customizationValue": "entry_pdbentry_1"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "1/PDB Search",
                "customization": "set page",
                "customizationValue": ""
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__iframe",
                "customization": "set variable",
                "customizationValue": "iframe_url"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__iframe_header",
                "customization": "set variable",
                "customizationValue": "iframe_header"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__d_count",
                "customization": "set variable",
                "customizationValue": "d_count"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__pdb_properties",
                "customization": "set variable",
                "customizationValue": "pdb_properties"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__ecs",
                "customization": "set variable",
                "customizationValue": "pdb_ecs"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__be_count",
                "customization": "set variable",
                "customizationValue": "be_count"
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "__bl_count",
                "customization": "set variable",
                "customizationValue": "bl_count"
              }
            ],
            "compact": true,
            "fullscreenEnabled": true,
            "noDataMessage": "Select a Combinatorial Interaction to view PDBs"
          },
          "database": "neo4j"
        },
        {
          "id": "a3d2f89f-ac0f-4c48-8ac7-92b1b9e23550",
          "title": "`$neodash_pdb_ligand_properties[\"description\"]` Summary",
          "query": "Table 1 below lists the domains (at $neodash_group_level level) known to interact with `$neodash_pdb_ligand_properties[\"description\"]`, their interaction mode and the number of PDB structures in which this ligand is found interaction with this domain.  \n&nbsp;  \nUse the PDB entry list in the bottom right to explore these structures individually.",
          "width": 5,
          "height": 5,
          "x": 0,
          "y": 0,
          "type": "text",
          "selection": {},
          "settings": {},
          "schema": []
        },
        {
          "id": "551fcbc9-52cb-4295-bdda-ebd96746703c",
          "title": "`$neodash_pdb_ligand_properties[\"name\"]` Structure",
          "query": "$neodash_iframe_url_pdbligand\n\n\n",
          "width": 5,
          "height": 5,
          "x": 0,
          "y": 5,
          "type": "iframe",
          "selection": {},
          "settings": {},
          "schema": []
        },
        {
          "id": "ef5c41cf-9ce8-46e9-81cd-825d2d6fd676",
          "title": "`$neodash_pdb_ligand_properties[\"name\"]` Combinatorial Interactions",
          "query": "CALL apoc.case([$neodash_max_cognate = \"Best\", 'RETURN [\"Y\"] as cognate_options, \"cognate\" as match_cognate', $neodash_max_cognate = \"Any\", 'RETURN [\"Y\", \"N\"] as cognate_options, \"cognate\" as match_cognate', $neodash_max_cognate = \"All\", 'RETURN [\"Y\", \"N\"] as cognate_options, \"all\" as match_cognate']) YIELD value WITH value.cognate_options as cognate_options, value.match_cognate as match_cognate\nCALL apoc.case([\n      $neodash_domain_type = \"SCOP\", \"MATCH (a:entry)<-[:IS_IN_PDB]-(be:boundEntity {ligandUniqueID: neodash_be_query_unique_id})<-[int:INTERACTS_WITH_LIGAND]-(d:scopDomain) WHERE int.interactionMode <> 'minor' WITH be.uniqueID as beUID, be.description as beName, COLLECT(d.group + ':' + int.interactionMode) AS domInt, a.pdbEntry as entry RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(entry)) AS entries, COLLECT(DISTINCT(beName)) as bound_entities\",\n      $neodash_domain_type = \"CATH\", \"MATCH (a:entry)<-[:IS_IN_PDB]-(be:boundEntity {ligandUniqueID: neodash_be_query_unique_id})<-[int:INTERACTS_WITH_LIGAND]-(d:cathDomain) WHERE int.interactionMode <> 'minor' WITH be.uniqueID as beUID, be.description as beName, COLLECT(d.group + ':' + int.interactionMode) AS domInt, a.pdbEntry as entry RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(entry)) AS entries, COLLECT(DISTINCT(beName)) as bound_entities\",\n      $neodash_domain_type = \"Pfam\", \"MATCH (a:entry)<-[:IS_IN_PDB]-(be:boundEntity {ligandUniqueID: neodash_be_query_unique_id})<-[int:INTERACTS_WITH_LIGAND]-(d:pfamDomain) WHERE int.interactionMode <> 'minor' WITH be.uniqueID as beUID, be.description as beName, COLLECT(d.group + ':' + int.interactionMode) AS domInt, a.pdbEntry as entry RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(entry)) AS entries, COLLECT(DISTINCT(beName)) as bound_entities\",\n      $neodash_domain_type = \"Superfamily\", \"MATCH (a:entry)<-[:IS_IN_PDB]-(be:boundEntity {ligandUniqueID: neodash_be_query_unique_id})<-[int:INTERACTS_WITH_LIGAND]-(d:superfamilyDomain) WHERE int.interactionMode <> 'minor' WITH be.uniqueID as beUID, be.description as beName, COLLECT(d.group + ':' + int.interactionMode) AS domInt, a.pdbEntry as entry RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(entry)) AS entries, COLLECT(DISTINCT(beName)) as bound_entities\",\n      $neodash_domain_type = \"Gene3D\", \"MATCH (a:entry)<-[:IS_IN_PDB]-(be:boundEntity {ligandUniqueID: neodash_be_query_unique_id})<-[int:INTERACTS_WITH_LIGAND]-(d:gene3dDomain) WHERE int.interactionMode <> 'minor' WITH be.uniqueID as beUID, be.description as beName, COLLECT(d.group + ':' + int.interactionMode) AS domInt, a.pdbEntry as entry RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(entry)) AS entries, COLLECT(DISTINCT(beName)) as bound_entities\",\n      $neodash_domain_type = \"SCOP2-SF\", \"MATCH (a:entry)<-[:IS_IN_PDB]-(be:boundEntity {ligandUniqueID: neodash_be_query_unique_id})<-[int:INTERACTS_WITH_LIGAND]-(d:scop2SfDomain) WHERE int.interactionMode <> 'minor' WITH be.uniqueID as beUID, be.description as beName, COLLECT(d.group + ':' + int.interactionMode) AS domInt, a.pdbEntry as entry RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(entry)) AS entries, COLLECT(DISTINCT(beName)) as bound_entities\",\n      $neodash_domain_type = \"SCOP2-FA\", \"MATCH (a:entry)<-[:IS_IN_PDB]-(be:boundEntity {ligandUniqueID: neodash_be_query_unique_id})<-[int:INTERACTS_WITH_LIGAND]-(d:scop2FaDomain) WHERE int.interactionMode <> 'minor' WITH be.uniqueID as beUID, be.description as beName, COLLECT(d.group + ':' + int.interactionMode) AS domInt, a.pdbEntry as entry RETURN apoc.coll.sort(domInt) as domInt, COLLECT(DISTINCT(entry)) AS entries, COLLECT(DISTINCT(beName)) as bound_entities\"],\n      'RETURN NULL', {neodash_be_query_unique_id: $neodash_pdb_ligand_properties['uniqueID'],cognate_options:cognate_options, match_cognate:match_cognate, neodash_parity_score_cutoff:$neodash_parity_score_cutoff}) YIELD value\nWITH value.domInt as domInt, value.bound_entities as bound_entities, value.entries as entries\nRETURN domInt as `Combinatorial Domain Interaction`, size(entries) as `#PDBs`, entries as __entries",
          "width": 15,
          "height": 5,
          "x": 5,
          "y": 5,
          "type": "table",
          "selection": {},
          "settings": {
            "fullscreenEnabled": true,
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Combinatorial Domain Interaction",
                "value": "__entries",
                "customization": "set variable",
                "customizationValue": "pdb_lig_domint_entries"
              }
            ]
          },
          "database": "neo4j"
        },
        {
          "id": "19a143b2-1b7e-4c99-96fc-a651dae1f05c",
          "title": "`$neodash_pdb_ligand_properties[\"name\"]` CogLigs",
          "query": "CALL apoc.when($neodash_max_cognate = \"Best\", 'RETURN [\"Y\"] as cognate_options', 'RETURN [\"Y\", \"N\"] as cognate_options') YIELD value WITH value.cognate_options as cognate_options\nMATCH (bd:boundDescriptor {uniqueID: $neodash_pdb_ligand_properties['uniqueID']})<-[:DESCRIBED_BY]-(be:boundEntity)-[sim:HAS_SIMILARITY]->(cl:cognateLigand)\nWHERE sim.parityScore > toFloat($neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options \nRETURN DISTINCT cl.name[0] as `Cognate Ligand`, sim.parityScore as `PARITY Score`,  \"http://localhost:8080/parity_viewer.html?data=\" + apoc.text.urlencode(apoc.convert.toJson({bl_name: cl.name[0], bl_smiles: cl.canonicalSMILES, parity: round(sim.parityScore, 3), parity_smarts: sim.paritySMARTS, parity_pdb: sim.parityMatchPDB, parity_bl: sim.parityMatchCognate, be_name:be.hetCode, be_smiles:bd.descriptor})) as __iframe_url_pdb_lig_cognate , cl.uniqueID as __cl_uniqueid ORDER BY `PARITY Score` DESC LIMIT 1000\n",
          "width": 10,
          "height": 5,
          "x": 5,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "fullscreenEnabled": true,
            "actionsRules": [
              {
                "condition": "Click",
                "field": "PARITY Score",
                "value": "__iframe_url_pdb_lig_cognate",
                "customization": "set variable",
                "customizationValue": "pdb_lig_cognate_url"
              }
            ]
          },
          "database": "neo4j"
        },
        {
          "id": "a3cb6f49-fc0f-4f98-bf97-93fe8c5834e7",
          "title": "PUT Cognate Ligand Similarity",
          "query": "$neodash_pdb_lig_cognate_url\n\n\n",
          "width": 9,
          "height": 5,
          "x": 15,
          "y": 0,
          "type": "iframe",
          "selection": {},
          "settings": {},
          "schema": []
        }
      ]
    },
    {
      "title": "Enzyme Search",
      "reports": [
        {
          "id": "b8075ea6-f345-4976-bfca-42cd0f592bd4",
          "title": "EC $neodash_enzyme_focus Info",
          "query": "**$neodash_enzymeclass_id** : $neodash_enzymeclass_desc\n\n\n**$neodash_enzymesubclass_id** : $neodash_enzymesubclass_desc\n\n\n**$neodash_enzymesubsubclass_id** : $neodash_enzymesubsubclass_desc\n\n\n**$neodash_enzyme_focus** : $neodash_enzyme_desc  \n\n$neodash_blsize cognate ligands (see cognate ligands table below)",
          "width": 7,
          "height": 4,
          "x": 0,
          "y": 0,
          "type": "text",
          "selection": {},
          "settings": {},
          "schema": []
        },
        {
          "id": "abcba3bf-1222-484e-99c9-2d6f23e20e68",
          "title": "PDBs : $neodash_enzyme_focus",
          "query": "MATCH (pdb:entry)<-[:IS_IN_PDB]-(pc:proteinChain) WHERE\n$neodash_enzyme_focus IN pc.ecList\nRETURN DISTINCT pdb.pdbEntry as `PDB ID` LIMIT 1000\n\n\n",
          "width": 4,
          "height": 4,
          "x": 20,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "actionsRules": [
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "1/PDB Search",
                "customization": "set page",
                "customizationValue": ""
              },
              {
                "condition": "Click",
                "field": "PDB ID",
                "value": "PDB ID",
                "customization": "set variable",
                "customizationValue": "entry_pdbentry_1"
              }
            ],
            "compact": true
          }
        },
        {
          "id": "c58f4851-73e6-418a-9048-3c10090bf750",
          "title": "Cognate Ligands: $neodash_enzyme_focus ",
          "query": "MATCH (ec:ecID {ecID: $neodash_enzyme_focus})<-[:IS_IN_EC]-(bl:cognateLigand)\nWITH bl.uniqueID as blUID\nMATCH (bl:cognateLigand {uniqueID: blUID})\nRETURN DISTINCT bl.name[0] AS `Cognate Ligand`, properties(bl) as __properties , bl.uniqueID AS __uniqueID, \"http://localhost:8080/smiles_viewer.html?type=smiles&data=\" + apoc.text.urlencode(apoc.convert.toJson({name: bl.name[0], smiles: bl.canonicalSMILES})) as __iframe_url, apoc.text.join([db in bl.ligandDB | \"* [\" + db + \"]\" + apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(db, \"_CHEBI:[0-9]+\", \"\"), 'KEGG:', '(https://www.genome.jp/entry/'), 'Pubchem:', '(https://pubchem.ncbi.nlm.nih.gov/compound/'), 'CHEBI:', '(https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:'), 'GlyTouCan:', '(https://glytoucan.org/Structures/Glycans/'), 'RHEA:', '(https://www.rhea-db.org/rhea/'), 'BRENDA:', '(https://www.brenda-enzymes.org/ligand.php?brenda_ligand_id=')], \")  \\n\") + \")\" as __ligand_db, apoc.text.join(bl.name, \",\") as __bl_names\n\n",
          "width": 7,
          "height": 4,
          "x": 7,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "noDataMessage": "No biological ligands found for enzyme.",
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "4/Cognate Ligand Search",
                "customization": "set page",
                "customizationValue": ""
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__uniqueID",
                "customization": "set variable",
                "customizationValue": "bl_query_unique_id"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "Cognate Ligand",
                "customization": "set variable",
                "customizationValue": "bl_query_name"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__iframe_url",
                "customization": "set variable",
                "customizationValue": "iframe_url_cognate"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__properties",
                "customization": "set variable",
                "customizationValue": "bl_properties"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__ligand_db",
                "customization": "set variable",
                "customizationValue": "bl_liganddb"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__bl_names",
                "customization": "set variable",
                "customizationValue": "bl_names"
              }
            ],
            "compact": true,
            "fullscreenEnabled": true,
            "wrapContent": true
          }
        },
        {
          "id": "37dd4ef4-85db-4b53-855a-9e2e7c3d4837",
          "title": "Reactions for EC $neodash_enzyme_focus",
          "query": "$neodash_ec_iframe_url\n\n\n",
          "width": 24,
          "height": 3,
          "x": 0,
          "y": 4,
          "type": "iframe",
          "selection": {},
          "settings": {},
          "schema": []
        },
        {
          "id": "767553b6-3188-4772-9f23-3593f26bf661",
          "title": "$neodash_group_level ",
          "query": "CALL apoc.case([\n      $neodash_domain_type = \"SCOP\", 'MATCH (pc:proteinChain)<-[:IS_IN_PROTEIN_CHAIN]-(d: scopDomain)-[:IS_IN_SCOP_FAMILY]->(sf:scopFamily)-[:IS_IN_SCOP_SUPERFAMILY]->(ssf:scopSuperfamily) WHERE neodash_enzyme_focus IN pc.ecList RETURN ssf.scopSuperfamily + \" (\" + ssf.description + \")\" as ssf_desc, \"Superfamily\" as group_level, ssf.description as ssf_id',\n      $neodash_domain_type = \"CATH\", 'MATCH (pc:proteinChain)<-[:IS_IN_PROTEIN_CHAIN]-(d: cathDomain)-[:IS_IN_CATH_HOMOLOGOUS_SUPERFAMILY]->(ch:cathHomologousSuperfamily) WHERE neodash_enzyme_focus IN pc.ecList RETURN ch.cathHomologousSuperfamily + \" (\" + ch.description + \")\" as ssf_desc, \"Superfamily\" as group_level, ch.cathHomologousSuperfamily as ssf_id',\n      $neodash_domain_type = \"Pfam\", 'MATCH (pc:proteinChain)<-[:IS_IN_PROTEIN_CHAIN]-(d:pfamDomain) WHERE neodash_enzyme_focus IN pc.ecList RETURN d.group_description  as ssf_desc, \"Family\" as group_level, d.group as ssf_id',\n      $neodash_domain_type = \"Superfamily\", 'MATCH (pc:proteinChain)<-[:IS_IN_PROTEIN_CHAIN]-(d: superfamilyDomain) WHERE neodash_enzyme_focus IN pc.ecList RETURN d.superfamilyAccession + \" (\" + d.description + \")\" as ssf_desc, \"Superfamily\" as group_level, d.superfamilyAccession as ssf_id',\n      $neodash_domain_type = \"Gene3D\", 'MATCH (pc:proteinChain)<-[:IS_IN_PROTEIN_CHAIN]-(d:gene3dDomain) WHERE neodash_enzyme_focus IN pc.ecList RETURN d.gene3dAccession + \" (\" + d.description + \")\" as ssf_desc, cognate_ligand_count, \"Superfamily\" as group_level, d.gene3dAccession as ssf_id',\n      $neodash_domain_type = \"SCOP2-SF\", 'MATCH (pc:proteinChain)<-[:IS_IN_PROTEIN_CHAIN]-(d:scop2SfDomain)-[:IS_IN_SCOP2_SUPERFAMILY]->(ssf:scop2Superfamily) WHERE neodash_enzyme_focus IN pc.ecList RETURN ssf.scop2Superfamily + \" (\" + ssf.description + \")\" as ssf_desc, ssf.description as description, d.domain as domain, d.url as url, \"Superfamily\" as group_level, ssf.scop2Superfamily as ssf_id',\n      $neodash_domain_type = \"SCOP2-FA\", 'MATCH (pc:proteinChain)<-[:IS_IN_PROTEIN_CHAIN]-(d:scop2FaDomain)-[:IS_IN_SCOP2_SUPERFAMILY]->(ssf:scop2Family) WHERE neodash_enzyme_focus IN pc.ecList RETURN ssf.scop2Family + \" (\" + ssf.description + \")\" as ssf_desc,  ssf.description as description, \"Family\" as group_level, ssf.scop2Family as ssf_id'],\n'RETURN NULL', {neodash_enzyme_focus: $neodash_enzyme_focus}) YIELD value \nWITH value.ssf_desc as Superfamily, value.group_level as group_level, value.ssf_id as ssf_id\nRETURN DISTINCT ssf_id as Accession, Superfamily as __superfamily_desc, group_level as __group_level, ssf_id as __ssf_id , [NULL] as __domint_entries\nLIMIT 1000\n\n\n\n\n",
          "width": 6,
          "height": 4,
          "x": 14,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "fullscreenEnabled": true,
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Accession",
                "value": "__group_level",
                "customization": "set variable",
                "customizationValue": "group_level"
              },
              {
                "condition": "Click",
                "field": "Accession",
                "value": "__ssf_id",
                "customization": "set variable",
                "customizationValue": "domain_superfamily_id"
              },
              {
                "condition": "Click",
                "field": "Accession",
                "value": "\"\"",
                "customization": "set variable",
                "customizationValue": "superfamily_cognate_ligand"
              },
              {
                "condition": "Click",
                "field": "Accession",
                "value": "__superfamily_desc",
                "customization": "set variable",
                "customizationValue": "domain_desc"
              },
              {
                "condition": "Click",
                "field": "Accession",
                "value": "3/Domain Search",
                "customization": "set page",
                "customizationValue": ""
              },
              {
                "condition": "Click",
                "field": "",
                "value": "Accession",
                "customization": "set variable",
                "customizationValue": "domain_group"
              },
              {
                "condition": "Click",
                "field": "",
                "value": "__domint_entries",
                "customization": "set variable",
                "customizationValue": "domint_entries"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Compare Domains",
      "reports": [
        {
          "id": "1518a7c5-ff6f-4961-81cf-2764b4b49918",
          "title": "Getting Started",
          "query": "Use this page to identify domains that are shared or unique to specific domain groups e.g. CATH Superfamilies, Pfam Families. To start, select two domain groups in the interactive search box below.  \n&nbsp;  \nClick on a ligand to view the Cognate Ligand Search page results for the ligand.  \n&nbsp;  \nNote: Whilst you can search for domain groups from all domain databases, results will only be presented for the currently selected domain database. Be sure to set this global parameter on the search page.",
          "width": 4,
          "height": 4,
          "x": 1,
          "y": 0,
          "type": "text",
          "selection": {},
          "settings": {},
          "schema": []
        },
        {
          "id": "a55badbc-b275-4bc1-b3b6-16c27d8be877",
          "title": "Select $neodash_group_level",
          "query": "RETURN true;",
          "width": 4,
          "height": 2,
          "x": 1,
          "y": 4,
          "type": "forms",
          "selection": {},
          "settings": {
            "type": "Node Property",
            "formFields": [
              {
                "type": "Node Property",
                "settings": {
                  "type": "Node Property",
                  "entityType": "domain",
                  "propertyType": "group",
                  "propertyTypeDisplay": "group",
                  "parameterName": "neodash_domain_group_1",
                  "id": "1",
                  "overridePropertyDisplayName": true,
                  "helperText": "Domain Group 1",
                  "defaultValue": "3.40.50.720"
                },
                "query": "MATCH (n:`domain`) \nWHERE toLower(toString(n.`group`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`group` as value,  n.`group` as display ORDER BY size(toString(value)) ASC LIMIT 5"
              },
              {
                "type": "Node Property",
                "settings": {
                  "type": "Node Property",
                  "entityType": "domain",
                  "propertyType": "group",
                  "propertyTypeDisplay": "group",
                  "parameterName": "neodash_domain_group_2",
                  "id": "2",
                  "overridePropertyDisplayName": true,
                  "helperText": "Domain Group 2",
                  "defaultValue": "1.10.10.10"
                },
                "query": "MATCH (n:`domain`) \nWHERE toLower(toString(n.`group`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`group` as value,  n.`group` as display ORDER BY size(toString(value)) ASC LIMIT 5"
              }
            ],
            "backgroundColor": "#2991E559",
            "description": "Select domain groups to compare. The domain groups should be from the currently selected domain database, set this in the search page global parameters."
          },
          "schema": []
        },
        {
          "id": "80125c9a-4bf1-4ff0-b0c3-e98d90b7117e",
          "title": "Shared Cognate Ligands",
          "query": "CALL apoc.case([$neodash_max_cognate = \"Best\", 'RETURN [\"Y\"] as cognate_options, \"cognate\" as match_cognate', $neodash_max_cognate = \"Any\", 'RETURN [\"Y\", \"N\"] as cognate_options, \"cognate\" as match_cognate', $neodash_max_cognate = \"All\", 'RETURN [\"Y\", \"N\"] as cognate_options, \"all\" as match_cognate']) YIELD value WITH value.cognate_options as cognate_options, value.match_cognate as match_cognate\nWITH cognate_options\nOPTIONAL MATCH (d:domain {group:$neodash_domain_group_1})-[int:INTERACTS_WITH_LIGAND]->(be:boundEntity)-[sim:HAS_SIMILARITY]->(cl:cognateLigand) WHERE sim.parityScore >= toFloat($neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options AND int.interactionMode <> \"minor\" WITH COLLECT(DISTINCT([cl.name[0], cl.uniqueID])) as clUIDs, cognate_options\nOPTIONAL MATCH (d2:domain {group:$neodash_domain_group_2})-[int2:INTERACTS_WITH_LIGAND]->(be2:boundEntity)-[sim2:HAS_SIMILARITY]->(cl2:cognateLigand) WHERE sim2.parityScore >= toFloat($neodash_parity_score_cutoff) AND sim2.bestCognate in cognate_options AND int2.interactionMode <> \"minor\" WITH clUIDs, COLLECT(DISTINCT([cl2.name[0], cl2.uniqueID])) as clUIDs2\nWITH apoc.coll.intersection(clUIDs, clUIDs2) as combinedClUIDs\nUNWIND combinedClUIDs AS clUID\nMATCH (bl:cognateLigand {uniqueID: clUID[1]}) RETURN\nbl.name[0] as `Cognate Ligand`,\n\"http://localhost:8080/smiles_viewer.html?type=smiles&data=\" + apoc.text.urlencode(apoc.convert.toJson({name: bl.name[0], smiles: bl.canonicalSMILES})) as __iframe_url_cognate, \nbl.name[0] as __coglig_name,\nproperties(bl) as __bl_properties, \napoc.text.join([db in bl.ligandDB | \"* [\" + db + \"]\" + apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(db, \"_CHEBI:[0-9]+\", \"\"), 'KEGG:', '(https://www.genome.jp/entry/'), 'Pubchem:', '(https://pubchem.ncbi.nlm.nih.gov/compound/'), 'CHEBI:', '(https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:'), 'GlyTouCan:', '(https://glytoucan.org/Structures/Glycans/'), 'RHEA:', '(https://www.rhea-db.org/rhea/'), 'BRENDA:', '(https://www.brenda-enzymes.org/ligand.php?brenda_ligand_id=')], \")  \\n\") + \")\" as __bl_ligand_db, \napoc.text.join(bl.name, \",\") as __bl_names,\n[] as __coglig_group_empty, bl.uniqueID as __bl_uniqueID,  \"ID:\" + bl.uniqueID as __bl_uniqueID_query, [NULL] as __coglig_domint_entries",
          "width": 6,
          "height": 6,
          "x": 5,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__bl_uniqueID",
                "customization": "set variable",
                "customizationValue": "bl_query_unique_id"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "Cognate Ligand",
                "customization": "set variable",
                "customizationValue": "bl_query_name"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__iframe_url_cognate",
                "customization": "set variable",
                "customizationValue": "iframe_url_cognate"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__bl_properties",
                "customization": "set variable",
                "customizationValue": "bl_properties"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__bl_ligand_db",
                "customization": "set variable",
                "customizationValue": "bl_liganddb"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__bl_names",
                "customization": "set variable",
                "customizationValue": "bl_names"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__coglig_group_empty",
                "customization": "set variable",
                "customizationValue": "coglig_group_pdbs"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "4/Cognate Ligand Search",
                "customization": "set page",
                "customizationValue": ""
              },
              {
                "condition": "Click",
                "field": "",
                "value": "__coglig_domint_entries",
                "customization": "set variable",
                "customizationValue": "coglig_domint_entries"
              }
            ],
            "noDataMessage": "No shared ligands between selected domains",
            "description": "The cognate ligands which are present in the mapping for both selected domain groups. Note: this does not include minor interactions. "
          }
        },
        {
          "id": "e021fa11-16ae-45e6-9501-5f3e57aa6046",
          "title": "$neodash_domain_group_1 Unique Ligands",
          "query": "CALL apoc.case([$neodash_max_cognate = \"Best\", 'RETURN [\"Y\"] as cognate_options, \"cognate\" as match_cognate', $neodash_max_cognate = \"Any\", 'RETURN [\"Y\", \"N\"] as cognate_options, \"cognate\" as match_cognate', $neodash_max_cognate = \"All\", 'RETURN [\"Y\", \"N\"] as cognate_options, \"all\" as match_cognate']) YIELD value WITH value.cognate_options as cognate_options, value.match_cognate as match_cognate\nWITH cognate_options\nOPTIONAL MATCH (d:domain {group:$neodash_domain_group_1})-[int:INTERACTS_WITH_LIGAND]->(be:boundEntity)-[sim:HAS_SIMILARITY]->(cl:cognateLigand) WHERE sim.parityScore >= toFloat($neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options AND int.interactionMode <> \"minor\" WITH COLLECT(DISTINCT([cl.name[0], cl.uniqueID])) as clUIDs, cognate_options\nOPTIONAL MATCH (d2:domain {group:$neodash_domain_group_2})-[int2:INTERACTS_WITH_LIGAND]->(be2:boundEntity)-[sim2:HAS_SIMILARITY]->(cl2:cognateLigand) WHERE sim2.parityScore >= toFloat($neodash_parity_score_cutoff) AND sim2.bestCognate in cognate_options AND int2.interactionMode <> \"minor\" WITH clUIDs, COLLECT(DISTINCT([cl2.name[0], cl2.uniqueID])) as clUIDs2\nWITH apoc.coll.subtract(clUIDs, clUIDs2) as uniqueClUIDs\nUNWIND uniqueClUIDs AS clUID\nMATCH (bl:cognateLigand {uniqueID: clUID[1]}) RETURN\nbl.name[0] as `Cognate Ligand`,\n\"http://localhost:8080/smiles_viewer.html?type=smiles&data=\" + apoc.text.urlencode(apoc.convert.toJson({name: bl.name[0], smiles: bl.canonicalSMILES})) as __iframe_url_cognate, \nbl.name[0] as __coglig_name,\nproperties(bl) as __bl_properties, \napoc.text.join([db in bl.ligandDB | \"* [\" + db + \"]\" + apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(db, \"_CHEBI:[0-9]+\", \"\"), 'KEGG:', '(https://www.genome.jp/entry/'), 'Pubchem:', '(https://pubchem.ncbi.nlm.nih.gov/compound/'), 'CHEBI:', '(https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:'), 'GlyTouCan:', '(https://glytoucan.org/Structures/Glycans/'), 'RHEA:', '(https://www.rhea-db.org/rhea/'), 'BRENDA:', '(https://www.brenda-enzymes.org/ligand.php?brenda_ligand_id=')], \")  \\n\") + \")\" as __bl_ligand_db, \napoc.text.join(bl.name, \",\") as __bl_names,\n[] as __coglig_group_empty, bl.uniqueID as __bl_uniqueID,  \"ID:\" + bl.uniqueID as __bl_uniqueID_query, [NULL] as __coglig_domint_entries",
          "width": 6,
          "height": 6,
          "x": 11,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "noDataMessage": "No ligands unique to this domain group",
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "4/Cognate Ligand Search",
                "customization": "set page",
                "customizationValue": ""
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__bl_uniqueID",
                "customization": "set variable",
                "customizationValue": "bl_query_unique_id"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "Cognate Ligand",
                "customization": "set variable",
                "customizationValue": "bl_query_name"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__iframe_url_cognate",
                "customization": "set variable",
                "customizationValue": "iframe_url_cognate"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__bl_properties",
                "customization": "set variable",
                "customizationValue": "bl_properties"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__bl_ligand_db",
                "customization": "set variable",
                "customizationValue": "bl_liganddb"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__bl_names",
                "customization": "set variable",
                "customizationValue": "bl_names"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__coglig_group_empty",
                "customization": "set variable",
                "customizationValue": "coglig_group_pdbs"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__coglig_domint_entries",
                "customization": "set variable",
                "customizationValue": "coglig_domint_entries"
              }
            ],
            "description": "The cognate ligands which are present in the mapping for domain group 1. Note: this does not include minor interactions. "
          }
        },
        {
          "id": "5873fed1-939b-4fab-bdfa-122e938e911d",
          "title": "$neodash_domain_group_2 Unique Ligands",
          "query": "CALL apoc.case([$neodash_max_cognate = \"Best\", 'RETURN [\"Y\"] as cognate_options, \"cognate\" as match_cognate', $neodash_max_cognate = \"Any\", 'RETURN [\"Y\", \"N\"] as cognate_options, \"cognate\" as match_cognate', $neodash_max_cognate = \"All\", 'RETURN [\"Y\", \"N\"] as cognate_options, \"all\" as match_cognate']) YIELD value WITH value.cognate_options as cognate_options, value.match_cognate as match_cognate\nWITH cognate_options\nOPTIONAL MATCH (d:domain {group:$neodash_domain_group_1})-[int:INTERACTS_WITH_LIGAND]->(be:boundEntity)-[sim:HAS_SIMILARITY]->(cl:cognateLigand) WHERE sim.parityScore >= toFloat($neodash_parity_score_cutoff) AND sim.bestCognate in cognate_options AND int.interactionMode <> \"minor\" WITH COLLECT(DISTINCT([cl.name[0], cl.uniqueID])) as clUIDs, cognate_options\nOPTIONAL MATCH (d2:domain {group:$neodash_domain_group_2})-[int2:INTERACTS_WITH_LIGAND]->(be2:boundEntity)-[sim2:HAS_SIMILARITY]->(cl2:cognateLigand) WHERE sim2.parityScore >= toFloat($neodash_parity_score_cutoff) AND sim2.bestCognate in cognate_options AND int2.interactionMode <> \"minor\" WITH clUIDs, COLLECT(DISTINCT([cl2.name[0], cl2.uniqueID])) as clUIDs2\nWITH apoc.coll.subtract(clUIDs2, clUIDs) as uniqueClUIDs\nUNWIND uniqueClUIDs AS clUID\nMATCH (bl:cognateLigand {uniqueID: clUID[1]}) RETURN\nbl.name[0] as `Cognate Ligand`,\n\"http://localhost:8080/smiles_viewer.html?type=smiles&data=\" + apoc.text.urlencode(apoc.convert.toJson({name: bl.name[0], smiles: bl.canonicalSMILES})) as __iframe_url_cognate, \nbl.name[0] as __coglig_name,\nproperties(bl) as __bl_properties, \napoc.text.join([db in bl.ligandDB | \"* [\" + db + \"]\" + apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(apoc.text.replace(db, \"_CHEBI:[0-9]+\", \"\"), 'KEGG:', '(https://www.genome.jp/entry/'), 'Pubchem:', '(https://pubchem.ncbi.nlm.nih.gov/compound/'), 'CHEBI:', '(https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:'), 'GlyTouCan:', '(https://glytoucan.org/Structures/Glycans/'), 'RHEA:', '(https://www.rhea-db.org/rhea/'), 'BRENDA:', '(https://www.brenda-enzymes.org/ligand.php?brenda_ligand_id=')], \")  \\n\") + \")\" as __bl_ligand_db, \napoc.text.join(bl.name, \",\") as __bl_names,\n[] as __coglig_group_empty, bl.uniqueID as __bl_uniqueID,  \"ID:\" + bl.uniqueID as __bl_uniqueID_query, [NULL] as __coglig_domint_entries",
          "width": 6,
          "height": 6,
          "x": 17,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "noDataMessage": "No ligands unique to this domain group",
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "4/Cognate Ligand Search",
                "customization": "set page",
                "customizationValue": ""
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__bl_uniqueID",
                "customization": "set variable",
                "customizationValue": "bl_query_unique_id"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__iframe_url_cognate",
                "customization": "set variable",
                "customizationValue": "iframe_url_cognate"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__bl_properties",
                "customization": "set variable",
                "customizationValue": "bl_properties"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__bl_ligand_db",
                "customization": "set variable",
                "customizationValue": "bl_liganddb"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__bl_names",
                "customization": "set variable",
                "customizationValue": "bl_names"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "Cognate Ligand",
                "customization": "set variable",
                "customizationValue": "bl_query_name"
              },
              {
                "condition": "Click",
                "field": "Cognate Ligand",
                "value": "__coglig_group_empty",
                "customization": "set variable",
                "customizationValue": "coglig_group_pdbs"
              },
              {
                "condition": "Click",
                "field": "",
                "value": "__coglig_domint_entries",
                "customization": "set variable",
                "customizationValue": "coglig_domint_entries"
              }
            ],
            "description": "The cognate ligands which are present in the mapping for domain group 2. Note: this does not include minor interactions. "
          }
        }
      ]
    },
    {
      "title": "Explore Graph",
      "reports": [
        {
          "id": "47515c54-bdf0-4aec-9492-d7bee773a568",
          "title": "Explore $neodash_entry_pdbentry_2 Graph",
          "query": "CALL apoc.when($neodash_max_cognate = \"Best\", 'RETURN [\"Y\"] as cognate_options', 'RETURN [\"Y\", \"N\"] as cognate_options') YIELD value WITH value.cognate_options as cognate_options\nMATCH (pdb:entry {pdbEntry: $neodash_entry_pdbentry_2})<-[e:IS_IN_PDB]-(be:boundEntity)\nWITH pdb, e, be, cognate_options\nOPTIONAL MATCH (be)<-[g:INTERACTS_WITH_LIGAND]-(d:domain {type: $neodash_domain_type})-[]-(pc)-[c:IS_IN_PDB]->(pdb)\nWITH be,g,d,c,pdb,e, cognate_options\nOPTIONAL MATCH (be)-[b:HAS_SIMILARITY]->(bl:cognateLigand)\nWHERE b.parityScore >= toFloat($neodash_parity_score_cutoff) and b.bestCognate in cognate_options\nRETURN be,bl,b,e,pdb,d,c,g\n\n\n\n\n\n",
          "width": 20,
          "height": 9,
          "x": 4,
          "y": 0,
          "type": "graph",
          "selection": {
            "boundEntity": "(label)",
            "entry": "title",
            "domain": "name",
            "cathDomain": "name",
            "CATH": "assemblyChainID",
            "cognateLigand": "name"
          },
          "settings": {},
          "schema": [
            [
              "boundEntity",
              "hetCode",
              "boundLigandResidues",
              "description",
              "boundLigandStructChain",
              "boundLigandChain",
              "type",
              "ecList",
              "displayID",
              "ligandUniqueID",
              "uniqueID",
              "boundMoleculeID"
            ],
            [
              "IS_IN_PDB"
            ],
            [
              "entry",
              "pdbECList",
              "keywords",
              "displayPDBECList",
              "pdbEntry",
              "title"
            ],
            [
              "domain",
              "domainSource",
              "cathAccession",
              "assemblyChainID",
              "domain",
              "name",
              "type",
              "group_description",
              "url",
              "group"
            ],
            [
              "cathDomain",
              "domainSource",
              "cathAccession",
              "assemblyChainID",
              "domain",
              "name",
              "type",
              "group_description",
              "url",
              "group"
            ],
            [
              "CATH",
              "domainSource",
              "cathAccession",
              "assemblyChainID",
              "domain",
              "name",
              "type",
              "group_description",
              "url",
              "group"
            ],
            [
              "INTERACTS_WITH_LIGAND",
              "ligandInterface",
              "interactionMode",
              "assembly_chain_id_protein",
              "domainCovalentCounts",
              "allProteinInterface",
              "domainHbondPerc",
              "domainContactPerc",
              "domainContactCounts",
              "domainHbondCounts",
              "proteinInterface"
            ],
            [
              "cognateLigand",
              "ligandDB",
              "compoundReactionIDs",
              "isCofactor",
              "name",
              "canonicalSMILES",
              "uniqueID"
            ],
            [
              "HAS_SIMILARITY",
              "parityScore",
              "parityMatchPDB",
              "subParityScore",
              "paritySMARTS",
              "ecList",
              "parityMatchCognate",
              "bestCognate"
            ]
          ],
          "database": "neo4j"
        },
        {
          "id": "0d020f56-c0a4-46f4-8506-7e2a93c9f6e4",
          "title": "Select PDB",
          "query": "MATCH (n:`entry`) \nWHERE toLower(toString(n.`pdbEntry`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`pdbEntry` as value,  n.`pdbEntry` as display ORDER BY size(toString(value)) ASC LIMIT 5",
          "width": 4,
          "height": 2,
          "x": 0,
          "y": 3,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Node Property",
            "entityType": "entry",
            "propertyType": "pdbEntry",
            "propertyTypeDisplay": "pdbEntry",
            "parameterName": "neodash_entry_pdbentry_2",
            "id": "2",
            "defaultValue": "1b42",
            "backgroundColor": "#2991E559",
            "helperText": "Select PDB Structure"
          },
          "schema": []
        },
        {
          "id": "c494d757-16fa-4d14-a4bf-bbdb9ef5a1ea",
          "title": "Getting Started",
          "query": "Select an entry using the search box below, to view the graph for that entry, including bound entities, domains and cognate ligands.  \n&nbsp;  \nNote: To prevent overly cluttered graphs, domain nodes are only shown for the currently selected domain database, alter this in the global parameters section on the search page. \n\n\n",
          "width": 4,
          "height": 3,
          "x": 0,
          "y": 0,
          "type": "text",
          "selection": {},
          "settings": {},
          "schema": []
        }
      ]
    }
  ],
  "parameters": {},
  "extensions": {
    "active": true,
    "activeReducers": [],
    "forms": {
      "active": true
    },
    "advanced-charts": {
      "active": true
    },
    "styling": {
      "active": true
    },
    "actions": {
      "active": true
    }
  },
  "uuid": "b60cb90b-1d9f-4fd1-af03-4907804e5834"
}