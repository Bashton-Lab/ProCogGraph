cath_bl_query: |
    MATCH
    (a:Entry {ID: $pdb_id})-[z:HAS_ENTITY]->(p:Entity  {TYPE : 'b', POLYMER_TYPE : 'B'})-[:IS_AN_INSTANCE_OF]->(bl:BoundLigand)-[part:IS_PART_OF]-(bm:BoundMolecule)
    WHERE NOT bl.CHEM_COMP_ID in ["UNX", "UNL"] AND bl.CHEM_COMP_ID in split(p.CHEM_COMP_LIST, ",")
    WITH * ORDER BY p.UNIQID, bm.ID
    WITH a, p, bl, collect(DISTINCT(bm.ID))[0] as bound_molecule_display_id,
    apoc.text.join(collect(DISTINCT(bm.ID)), "|") as bm_ids,  
    collect(DISTINCT(part.SYM_OPERATOR)) as bm_bl_sym_ops
    CALL {WITH p MATCH (p)-[:IS_A]->(cc:ChemicalComponent)-[:DESCRIBED_BY]->(cd:ChemicalComponentDesc {TYPE : "SMILES_CANONICAL"}) RETURN cd LIMIT 1}
    WITH *
    CALL {WITH bl, bm_bl_sym_ops MATCH (bl)-[Arp:HAS_ARP_CONTACT]->(pr:PDBResidue)<-[:HAS_PDB_RESIDUE]-(e:Entity  {TYPE : 'p', POLYMER_TYPE: "P"}) WHERE Arp.SYM_OP_1 IS NULL OR Arp.SYM_OP_1 = bm_bl_sym_ops[0] AND Arp.CONTACT_TYPE <> "['vdw_clash']" AND Arp.CONTACT_TYPE <> "['clash']" RETURN Arp, pr, e}
    WITH *
    CALL {WITH bl, Arp, pr MATCH (bl)-[Arp]->(pr)-[cath_rel:IS_IN_CATH_DOMAIN]->(cath:CATH) WHERE cath_rel.STRUCT_ASYM_ID = Arp.STRUCT_ASYM_ID_2 RETURN cath_rel, cath}
    RETURN
    a.ID as pdb_id,
    a.DESCRIPTOR as pdb_descriptor,
    a.TITLE as pdb_title,
    a.KEYWORDS as pdb_keywords,
    e.UNIQID as protein_entity_id,
    e.DESCRIPTION as protein_entity_description,
    e.UNIQID + "_" + Arp.STRUCT_ASYM_ID_2 as chainUniqueID,
    Arp.STRUCT_ASYM_ID_2 as chain_id,
    Arp.AUTH_ASYM_ID_2 as auth_chain_id,
    p.UNIQID as ligand_entity_id,
    p.ID as ligand_entity_id_numerical,
    p.DESCRIPTION as description,
    bl.UNIQID as bound_ligand_id,
    bl.CHEM_COMP_ID as bound_ligand_name,
    bl.STRUCT_ASYM_ID as bound_ligand_struct_asym_id,
    "ligand" as type,
    cd.DESCRIPTOR as descriptor,
    cath.DOMAIN as cath_domain, 
    cath.NAME as cath_name, cath.CLASS as cath_class, 
    cath.ARCH as cath_architecture, cath.TOPOL as cath_topology, 
    cath.HOMOL as cath_homologous_superfamily, 
    cath.CATHCODE as cath_code, 
    cath_rel.STRUCT_ASYM_ID as cath_chain, 
    a.ID + "_" + bound_molecule_display_id + "_" + bl.STRUCT_ASYM_ID as uniqueID, 
    bm_ids,
    bound_molecule_display_id,
    apoc.text.join(collect(DISTINCT(Arp.AUTH_SEQ_ID_2)), "|") as pdb_residue_auth_id, 
    apoc.text.join(collect(DISTINCT(Arp.AUTH_SEQ_ID_1)), "|") as bound_ligand_auth_id, 
    apoc.coll.occurrences(apoc.coll.flatten(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))), "hbond") as hbond_count,
    apoc.coll.occurrences(apoc.coll.flatten(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))), "covalent") as covalent_count,
    size(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))) as contact_type_count
    

cath_sugar_query: |
    MATCH
    (a:Entry {ID: $pdb_id})-[z:HAS_ENTITY]->(p:Entity  {TYPE : 's', POLYMER_TYPE : 'S'})-[:IS_AN_INSTANCE_OF]->(bl:BoundLigand)-[part:IS_PART_OF]-(bm:BoundMolecule)
    WHERE NOT bl.CHEM_COMP_ID in ["UNX", "UNL"] AND bl.CHEM_COMP_ID in split(p.CHEM_COMP_LIST, ",")
    WITH * ORDER BY p.UNIQID, bm.ID
    WITH a, p, bl, collect(DISTINCT(bm.ID))[0] as bound_molecule_display_id,
    apoc.text.join(collect(DISTINCT(bm.ID)), "|") as bm_ids,  
    collect(DISTINCT(part.SYM_OPERATOR)) as bm_bl_sym_ops
    CALL {WITH p MATCH (p)-[:IS_A]->(cc:ChemicalComponent)-[:DESCRIBED_BY]->(cd:ChemicalComponentDesc {TYPE : "SMILES_CANONICAL"}) RETURN cd LIMIT 1}
    WITH *
    CALL {WITH bl, bm_bl_sym_ops MATCH (bl)-[Arp:HAS_ARP_CONTACT]->(pr:PDBResidue)<-[:HAS_PDB_RESIDUE]-(e:Entity  {TYPE : 'p', POLYMER_TYPE: "P"}) WHERE Arp.SYM_OP_1 IS NULL OR Arp.SYM_OP_1 = bm_bl_sym_ops[0] AND Arp.CONTACT_TYPE <> "['vdw_clash']" AND Arp.CONTACT_TYPE <> "['clash']" RETURN Arp, pr, e}
    WITH *
    CALL {WITH bl, Arp, pr MATCH (bl)-[Arp]->(pr)-[cath_rel:IS_IN_CATH_DOMAIN]->(cath:CATH) WHERE cath_rel.STRUCT_ASYM_ID = Arp.STRUCT_ASYM_ID_2 RETURN cath_rel, cath}
    RETURN
    a.ID as pdb_id,
    a.DESCRIPTOR as pdb_descriptor,
    a.TITLE as pdb_title,
    a.KEYWORDS as pdb_keywords,
    e.UNIQID as protein_entity_id,
    e.DESCRIPTION as protein_entity_description,
    e.UNIQID + "_" + Arp.STRUCT_ASYM_ID_2 as chainUniqueID,
    Arp.STRUCT_ASYM_ID_2 as chain_id,
    Arp.AUTH_ASYM_ID_2 as auth_chain_id,
    p.UNIQID as ligand_entity_id,
    p.ID as ligand_entity_id_numerical,
    p.DESCRIPTION as description,
    bl.UNIQID as bound_ligand_id,
    bl.CHEM_COMP_ID as bound_ligand_name,
    bl.STRUCT_ASYM_ID as bound_ligand_struct_asym_id,
    "sugar" as type,
    cd.DESCRIPTOR as descriptor,
    cath.DOMAIN as cath_domain, 
    cath.NAME as cath_name, cath.CLASS as cath_class, 
    cath.ARCH as cath_architecture, cath.TOPOL as cath_topology, 
    cath.HOMOL as cath_homologous_superfamily, 
    cath.CATHCODE as cath_code, 
    cath_rel.STRUCT_ASYM_ID as cath_chain,
    a.ID + "_" + bound_molecule_display_id + "_" + bl.STRUCT_ASYM_ID as uniqueID, 
    bm_ids,
    bound_molecule_display_id,
    apoc.text.join(collect(DISTINCT(Arp.AUTH_SEQ_ID_2)), "|") as pdb_residue_auth_id, 
    apoc.text.join(collect(DISTINCT(Arp.AUTH_SEQ_ID_1)), "|") as bound_ligand_auth_id, 
    apoc.coll.occurrences(apoc.coll.flatten(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))), "hbond") as hbond_count,
    apoc.coll.occurrences(apoc.coll.flatten(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))), "covalent") as covalent_count,
    size(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))) as contact_type_count

scop_bl_query: |
    MATCH
    (a:Entry {ID: $pdb_id})-[z:HAS_ENTITY]->(p:Entity  {TYPE : 'b', POLYMER_TYPE : 'B'})-[:IS_AN_INSTANCE_OF]->(bl:BoundLigand)-[part:IS_PART_OF]-(bm:BoundMolecule)
    WHERE NOT bl.CHEM_COMP_ID in ["UNX", "UNL"] AND bl.CHEM_COMP_ID in split(p.CHEM_COMP_LIST, ",")
    WITH * ORDER BY p.UNIQID, bm.ID
    WITH a, p, bl, collect(DISTINCT(bm.ID))[0] as bound_molecule_display_id,
    apoc.text.join(collect(DISTINCT(bm.ID)), "|") as bm_ids,  
    collect(DISTINCT(part.SYM_OPERATOR)) as bm_bl_sym_ops
    CALL {WITH p MATCH (p)-[:IS_A]->(cc:ChemicalComponent)-[:DESCRIBED_BY]->(cd:ChemicalComponentDesc {TYPE : "SMILES_CANONICAL"}) RETURN cd LIMIT 1}
    WITH *
    CALL {WITH bl, bm_bl_sym_ops MATCH (bl)-[Arp:HAS_ARP_CONTACT]->(pr:PDBResidue)<-[:HAS_PDB_RESIDUE]-(e:Entity  {TYPE : 'p', POLYMER_TYPE: "P"}) WHERE Arp.SYM_OP_1 IS NULL OR Arp.SYM_OP_1 = bm_bl_sym_ops[0] AND Arp.CONTACT_TYPE <> "['vdw_clash']" AND Arp.CONTACT_TYPE <> "['clash']" RETURN Arp, pr, e}
    WITH *
    CALL {WITH bl, Arp, pr MATCH (bl)-[Arp]->(pr)-[scop_rel:IS_IN_SCOP_DOMAIN]->(scop:SCOP) WHERE scop_rel.STRUCT_ASYM_ID = Arp.STRUCT_ASYM_ID_2 RETURN scop_rel, scop}
    RETURN
    a.ID as pdb_id,
    a.DESCRIPTOR as pdb_descriptor,
    a.TITLE as pdb_title,
    a.KEYWORDS as pdb_keywords,
    e.UNIQID as protein_entity_id,
    e.DESCRIPTION as protein_entity_description,
    e.UNIQID + "_" + Arp.STRUCT_ASYM_ID_2 as chainUniqueID,
    Arp.STRUCT_ASYM_ID_2 as chain_id,
    Arp.AUTH_ASYM_ID_2 as auth_chain_id,
    p.UNIQID as ligand_entity_id,
    p.ID as ligand_entity_id_numerical,
    p.DESCRIPTION as description,
    bl.UNIQID as bound_ligand_id,
    bl.CHEM_COMP_ID as bound_ligand_name,
    bl.STRUCT_ASYM_ID as bound_ligand_struct_asym_id,
    "ligand" as type,
    cd.DESCRIPTOR as descriptor,
    scop.SUNID as scop_sunid,
    scop.DESCRIPTION as scop_description,
    scop.SCCS as scop_sccs,
    scop_rel.CLASS_ID as scop_class_id,
    scop_rel.FOLD_ID as scop_fold_id,
    scop_rel.SUPERFAMILY_ID as scop_superfamily_id,
    scop_rel.SCOP_ID as scop_id,
    scop_rel.STRUCT_ASYM_ID as scop_chain, 
    a.ID + "_" + bound_molecule_display_id + "_" + bl.STRUCT_ASYM_ID as uniqueID, 
    bm_ids,
    bound_molecule_display_id,
    apoc.text.join(collect(DISTINCT(Arp.AUTH_SEQ_ID_2)), "|") as pdb_residue_auth_id, 
    apoc.text.join(collect(DISTINCT(Arp.AUTH_SEQ_ID_1)), "|") as bound_ligand_auth_id, 
    apoc.coll.occurrences(apoc.coll.flatten(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))), "hbond") as hbond_count,
    apoc.coll.occurrences(apoc.coll.flatten(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))), "covalent") as covalent_count,
    size(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))) as contact_type_count

scop_sugar_query: |
    MATCH
    (a:Entry {ID: $pdb_id})-[z:HAS_ENTITY]->(p:Entity  {TYPE : 's', POLYMER_TYPE : 'S'})-[:IS_AN_INSTANCE_OF]->(bl:BoundLigand)-[part:IS_PART_OF]-(bm:BoundMolecule)
    WHERE NOT bl.CHEM_COMP_ID in ["UNX", "UNL"] AND bl.CHEM_COMP_ID in split(p.CHEM_COMP_LIST, ",")
    WITH * ORDER BY p.UNIQID, bm.ID
    WITH a, p, bl, collect(DISTINCT(bm.ID))[0] as bound_molecule_display_id,
    apoc.text.join(collect(DISTINCT(bm.ID)), "|") as bm_ids,  
    collect(DISTINCT(part.SYM_OPERATOR)) as bm_bl_sym_ops
    CALL {WITH p MATCH (p)-[:IS_A]->(cc:ChemicalComponent)-[:DESCRIBED_BY]->(cd:ChemicalComponentDesc {TYPE : "SMILES_CANONICAL"}) RETURN cd LIMIT 1}
    WITH *
    CALL {WITH bl, bm_bl_sym_ops MATCH (bl)-[Arp:HAS_ARP_CONTACT]->(pr:PDBResidue)<-[:HAS_PDB_RESIDUE]-(e:Entity  {TYPE : 'p', POLYMER_TYPE: "P"}) WHERE Arp.SYM_OP_1 IS NULL OR Arp.SYM_OP_1 = bm_bl_sym_ops[0] AND Arp.CONTACT_TYPE <> "['vdw_clash']" AND Arp.CONTACT_TYPE <> "['clash']" RETURN Arp, pr, e}
    WITH *
    CALL {WITH bl, Arp, pr MATCH (bl)-[Arp]->(pr)-[scop_rel:IS_IN_SCOP_DOMAIN]->(scop:SCOP) WHERE scop_rel.STRUCT_ASYM_ID = Arp.STRUCT_ASYM_ID_2 RETURN scop_rel, scop}
    RETURN
    a.ID as pdb_id,
    a.DESCRIPTOR as pdb_descriptor,
    a.TITLE as pdb_title,
    a.KEYWORDS as pdb_keywords,
    e.UNIQID as protein_entity_id,
    e.DESCRIPTION as protein_entity_description,
    e.UNIQID + "_" + Arp.STRUCT_ASYM_ID_2 as chainUniqueID,
    Arp.STRUCT_ASYM_ID_2 as chain_id,
    Arp.AUTH_ASYM_ID_2 as auth_chain_id,
    p.UNIQID as ligand_entity_id,
    p.ID as ligand_entity_id_numerical,
    p.DESCRIPTION as description,
    bl.UNIQID as bound_ligand_id,
    bl.CHEM_COMP_ID as bound_ligand_name,
    bl.STRUCT_ASYM_ID as bound_ligand_struct_asym_id,
    "sugar" as type,
    cd.DESCRIPTOR as descriptor,
    scop.SUNID as scop_sunid,
    scop.DESCRIPTION as scop_description,
    scop.SCCS as scop_sccs,
    scop_rel.CLASS_ID as scop_class_id,
    scop_rel.FOLD_ID as scop_fold_id,
    scop_rel.SUPERFAMILY_ID as scop_superfamily_id,
    scop_rel.SCOP_ID as scop_id,
    scop_rel.STRUCT_ASYM_ID as scop_chain, 
    a.ID + "_" + bound_molecule_display_id + "_" + bl.STRUCT_ASYM_ID as uniqueID, 
    bm_ids,
    bound_molecule_display_id,
    apoc.text.join(collect(DISTINCT(Arp.AUTH_SEQ_ID_2)), "|") as pdb_residue_auth_id, 
    apoc.text.join(collect(DISTINCT(Arp.AUTH_SEQ_ID_1)), "|") as bound_ligand_auth_id, 
    apoc.coll.occurrences(apoc.coll.flatten(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))), "hbond") as hbond_count,
    apoc.coll.occurrences(apoc.coll.flatten(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))), "covalent") as covalent_count,
    size(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))) as contact_type_count

interpro_d_bl_query: |
    MATCH
    (a:Entry {ID: $pdb_id})-[z:HAS_ENTITY]->(p:Entity  {TYPE : 'b', POLYMER_TYPE : 'B'})-[:IS_AN_INSTANCE_OF]->(bl:BoundLigand)-[part:IS_PART_OF]-(bm:BoundMolecule)
    WHERE NOT bl.CHEM_COMP_ID in ["UNX", "UNL"] AND bl.CHEM_COMP_ID in split(p.CHEM_COMP_LIST, ",")
    WITH * ORDER BY p.UNIQID, bm.ID
    WITH a, p, bl, collect(DISTINCT(bm.ID))[0] as bound_molecule_display_id,
    apoc.text.join(collect(DISTINCT(bm.ID)), "|") as bm_ids,  
    collect(DISTINCT(part.SYM_OPERATOR)) as bm_bl_sym_ops
    CALL {WITH p MATCH (p)-[:IS_A]->(cc:ChemicalComponent)-[:DESCRIBED_BY]->(cd:ChemicalComponentDesc {TYPE : "SMILES_CANONICAL"}) RETURN cd LIMIT 1}
    WITH *
    CALL {WITH bl, bm_bl_sym_ops MATCH (bl)-[Arp:HAS_ARP_CONTACT]->(pr:PDBResidue)<-[:HAS_PDB_RESIDUE]-(e:Entity  {TYPE : 'p', POLYMER_TYPE: "P"}) WHERE Arp.SYM_OP_1 IS NULL OR Arp.SYM_OP_1 = bm_bl_sym_ops[0] AND Arp.CONTACT_TYPE <> "['vdw_clash']" AND Arp.CONTACT_TYPE <> "['clash']" RETURN Arp, pr, e}
    WITH *
    CALL {WITH bl, Arp, pr MATCH (bl)-[Arp]->(pr)-[ip:IS_IN_INTERPRO]->(i:Interpro {ENTRY_TYPE: "D"}) WHERE ip.STRUCT_ASYM_ID = Arp.STRUCT_ASYM_ID_2 RETURN ip, i}
    RETURN
    a.ID as pdb_id,
    a.DESCRIPTOR as pdb_descriptor,
    a.TITLE as pdb_title,
    a.KEYWORDS as pdb_keywords,
    e.UNIQID as protein_entity_id,
    e.DESCRIPTION as protein_entity_description,
    e.UNIQID + "_" + Arp.STRUCT_ASYM_ID_2 as chainUniqueID,
    Arp.STRUCT_ASYM_ID_2 as chain_id,
    Arp.AUTH_ASYM_ID_2 as auth_chain_id,
    p.UNIQID as ligand_entity_id,
    p.ID as ligand_entity_id_numerical,
    p.DESCRIPTION as description,
    bl.UNIQID as bound_ligand_id,
    bl.CHEM_COMP_ID as bound_ligand_name,
    bl.STRUCT_ASYM_ID as bound_ligand_struct_asym_id,
    "ligand" as type,
    cd.DESCRIPTOR as descriptor,
    i.ABBREV as interpro_type,
    i.INTERPRO_ACCESSION as interpro_accession,
    i.NAME as interpro_name,
    ip.STRUCT_ASYM_ID as interpro_chain,
    a.ID + "_" + bound_molecule_display_id + "_" + bl.STRUCT_ASYM_ID as uniqueID, 
    bm_ids,
    bound_molecule_display_id,
    apoc.text.join(collect(DISTINCT(Arp.AUTH_SEQ_ID_2)), "|") as pdb_residue_auth_id, 
    apoc.text.join(collect(DISTINCT(Arp.AUTH_SEQ_ID_1)), "|") as bound_ligand_auth_id, 
    apoc.coll.occurrences(apoc.coll.flatten(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))), "hbond") as hbond_count,
    apoc.coll.occurrences(apoc.coll.flatten(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))), "covalent") as covalent_count,
    size(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))) as contact_type_count

interpro_d_sugar_query: |
    MATCH
    (a:Entry {ID: $pdb_id})-[z:HAS_ENTITY]->(p:Entity  {TYPE : 's', POLYMER_TYPE : 'S'})-[:IS_AN_INSTANCE_OF]->(bl:BoundLigand)-[part:IS_PART_OF]-(bm:BoundMolecule)
    WHERE NOT bl.CHEM_COMP_ID in ["UNX", "UNL"] AND bl.CHEM_COMP_ID in split(p.CHEM_COMP_LIST, ",")
    WITH * ORDER BY p.UNIQID, bm.ID
    WITH a, p, bl, collect(DISTINCT(bm.ID))[0] as bound_molecule_display_id,
    apoc.text.join(collect(DISTINCT(bm.ID)), "|") as bm_ids,  
    collect(DISTINCT(part.SYM_OPERATOR)) as bm_bl_sym_ops
    CALL {WITH p MATCH (p)-[:IS_A]->(cc:ChemicalComponent)-[:DESCRIBED_BY]->(cd:ChemicalComponentDesc {TYPE : "SMILES_CANONICAL"}) RETURN cd LIMIT 1}
    WITH *
    CALL {WITH bl, bm_bl_sym_ops MATCH (bl)-[Arp:HAS_ARP_CONTACT]->(pr:PDBResidue)<-[:HAS_PDB_RESIDUE]-(e:Entity  {TYPE : 'p', POLYMER_TYPE: "P"}) WHERE Arp.SYM_OP_1 IS NULL OR Arp.SYM_OP_1 = bm_bl_sym_ops[0] AND Arp.CONTACT_TYPE <> "['vdw_clash']" AND Arp.CONTACT_TYPE <> "['clash']" RETURN Arp, pr, e}
    WITH *
    CALL {WITH bl, Arp, pr MATCH (bl)-[Arp]->(pr)-[ip:IS_IN_INTERPRO]->(i:Interpro {ENTRY_TYPE: "D"}) WHERE ip.STRUCT_ASYM_ID = Arp.STRUCT_ASYM_ID_2 RETURN ip, i}
    RETURN
    a.ID as pdb_id,
    a.DESCRIPTOR as pdb_descriptor,
    a.TITLE as pdb_title,
    a.KEYWORDS as pdb_keywords,
    e.UNIQID as protein_entity_id,
    e.DESCRIPTION as protein_entity_description,
    e.UNIQID + "_" + Arp.STRUCT_ASYM_ID_2 as chainUniqueID,
    Arp.STRUCT_ASYM_ID_2 as chain_id,
    Arp.AUTH_ASYM_ID_2 as auth_chain_id,
    p.UNIQID as ligand_entity_id,
    p.ID as ligand_entity_id_numerical,
    p.DESCRIPTION as description,
    bl.UNIQID as bound_ligand_id,
    bl.CHEM_COMP_ID as bound_ligand_name,
    bl.STRUCT_ASYM_ID as bound_ligand_struct_asym_id,
    "sugar" as type,
    cd.DESCRIPTOR as descriptor,
    i.ABBREV as interpro_type,
    i.INTERPRO_ACCESSION as interpro_accession,
    i.NAME as interpro_name,
    ip.STRUCT_ASYM_ID as interpro_chain,
    a.ID + "_" + bound_molecule_display_id + "_" + bl.STRUCT_ASYM_ID as uniqueID, 
    bm_ids,
    bound_molecule_display_id,
    apoc.text.join(collect(DISTINCT(Arp.AUTH_SEQ_ID_2)), "|") as pdb_residue_auth_id, 
    apoc.text.join(collect(DISTINCT(Arp.AUTH_SEQ_ID_1)), "|") as bound_ligand_auth_id, 
    apoc.coll.occurrences(apoc.coll.flatten(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))), "hbond") as hbond_count,
    apoc.coll.occurrences(apoc.coll.flatten(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))), "covalent") as covalent_count,
    size(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))) as contact_type_count

interpro_f_bl_query: |
    MATCH
    (a:Entry {ID: $pdb_id})-[z:HAS_ENTITY]->(p:Entity  {TYPE : 'b', POLYMER_TYPE : 'B'})-[:IS_AN_INSTANCE_OF]->(bl:BoundLigand)-[part:IS_PART_OF]-(bm:BoundMolecule)
    WHERE NOT bl.CHEM_COMP_ID in ["UNX", "UNL"] AND bl.CHEM_COMP_ID in split(p.CHEM_COMP_LIST, ",")
    WITH * ORDER BY p.UNIQID, bm.ID
    WITH a, p, bl, collect(DISTINCT(bm.ID))[0] as bound_molecule_display_id,
    apoc.text.join(collect(DISTINCT(bm.ID)), "|") as bm_ids,  
    collect(DISTINCT(part.SYM_OPERATOR)) as bm_bl_sym_ops
    CALL {WITH p MATCH (p)-[:IS_A]->(cc:ChemicalComponent)-[:DESCRIBED_BY]->(cd:ChemicalComponentDesc {TYPE : "SMILES_CANONICAL"}) RETURN cd LIMIT 1}
    WITH *
    CALL {WITH bl, bm_bl_sym_ops MATCH (bl)-[Arp:HAS_ARP_CONTACT]->(pr:PDBResidue)<-[:HAS_PDB_RESIDUE]-(e:Entity  {TYPE : 'p', POLYMER_TYPE: "P"}) WHERE Arp.SYM_OP_1 IS NULL OR Arp.SYM_OP_1 = bm_bl_sym_ops[0] AND Arp.CONTACT_TYPE <> "['vdw_clash']" AND Arp.CONTACT_TYPE <> "['clash']" RETURN Arp, pr, e}
    WITH *
    CALL {WITH bl, Arp, pr MATCH (bl)-[Arp]->(pr)-[ip:IS_IN_INTERPRO]->(i:Interpro {ENTRY_TYPE: "F"}) WHERE ip.STRUCT_ASYM_ID = Arp.STRUCT_ASYM_ID_2 RETURN ip, i}
    RETURN
    a.ID as pdb_id,
    a.DESCRIPTOR as pdb_descriptor,
    a.TITLE as pdb_title,
    a.KEYWORDS as pdb_keywords,
    e.UNIQID as protein_entity_id,
    e.DESCRIPTION as protein_entity_description,
    e.UNIQID + "_" + Arp.STRUCT_ASYM_ID_2 as chainUniqueID,
    Arp.STRUCT_ASYM_ID_2 as chain_id,
    Arp.AUTH_ASYM_ID_2 as auth_chain_id,
    p.UNIQID as ligand_entity_id,
    p.ID as ligand_entity_id_numerical,
    p.DESCRIPTION as description,
    bl.UNIQID as bound_ligand_id,
    bl.CHEM_COMP_ID as bound_ligand_name,
    bl.STRUCT_ASYM_ID as bound_ligand_struct_asym_id,
    "ligand" as type,
    cd.DESCRIPTOR as descriptor,
    i.ABBREV as interpro_type,
    i.INTERPRO_ACCESSION as interpro_accession,
    i.NAME as interpro_name,
    ip.STRUCT_ASYM_ID as interpro_chain,
    a.ID + "_" + bound_molecule_display_id + "_" + bl.STRUCT_ASYM_ID as uniqueID, 
    bm_ids,
    bound_molecule_display_id,
    apoc.text.join(collect(DISTINCT(Arp.AUTH_SEQ_ID_2)), "|") as pdb_residue_auth_id, 
    apoc.text.join(collect(DISTINCT(Arp.AUTH_SEQ_ID_1)), "|") as bound_ligand_auth_id, 
    apoc.coll.occurrences(apoc.coll.flatten(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))), "hbond") as hbond_count,
    apoc.coll.occurrences(apoc.coll.flatten(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))), "covalent") as covalent_count,
    size(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))) as contact_type_count

interpro_f_sugar_query: |
    MATCH
    (a:Entry {ID: $pdb_id})-[z:HAS_ENTITY]->(p:Entity  {TYPE : 's', POLYMER_TYPE : 'S'})-[:IS_AN_INSTANCE_OF]->(bl:BoundLigand)-[part:IS_PART_OF]-(bm:BoundMolecule)
    WHERE NOT bl.CHEM_COMP_ID in ["UNX", "UNL"] AND bl.CHEM_COMP_ID in split(p.CHEM_COMP_LIST, ",")
    WITH * ORDER BY p.UNIQID, bm.ID
    WITH a, p, bl, collect(DISTINCT(bm.ID))[0] as bound_molecule_display_id,
    apoc.text.join(collect(DISTINCT(bm.ID)), "|") as bm_ids,  
    collect(DISTINCT(part.SYM_OPERATOR)) as bm_bl_sym_ops
    CALL {WITH p MATCH (p)-[:IS_A]->(cc:ChemicalComponent)-[:DESCRIBED_BY]->(cd:ChemicalComponentDesc {TYPE : "SMILES_CANONICAL"}) RETURN cd LIMIT 1}
    WITH *
    CALL {WITH bl, bm_bl_sym_ops MATCH (bl)-[Arp:HAS_ARP_CONTACT]->(pr:PDBResidue)<-[:HAS_PDB_RESIDUE]-(e:Entity  {TYPE : 'p', POLYMER_TYPE: "P"}) WHERE Arp.SYM_OP_1 IS NULL OR Arp.SYM_OP_1 = bm_bl_sym_ops[0] AND Arp.CONTACT_TYPE <> "['vdw_clash']" AND Arp.CONTACT_TYPE <> "['clash']" RETURN Arp, pr, e}
    WITH *
    CALL {WITH bl, Arp, pr MATCH (bl)-[Arp]->(pr)-[ip:IS_IN_INTERPRO]->(i:Interpro {ENTRY_TYPE: "F"}) WHERE ip.STRUCT_ASYM_ID = Arp.STRUCT_ASYM_ID_2 RETURN ip, i}
    RETURN
    a.ID as pdb_id,
    a.DESCRIPTOR as pdb_descriptor,
    a.TITLE as pdb_title,
    a.KEYWORDS as pdb_keywords,
    e.UNIQID as protein_entity_id,
    e.DESCRIPTION as protein_entity_description,
    e.UNIQID + "_" + Arp.STRUCT_ASYM_ID_2 as chainUniqueID,
    Arp.STRUCT_ASYM_ID_2 as chain_id,
    Arp.AUTH_ASYM_ID_2 as auth_chain_id,
    p.UNIQID as ligand_entity_id,
    p.ID as ligand_entity_id_numerical,
    p.DESCRIPTION as description,
    bl.UNIQID as bound_ligand_id,
    bl.CHEM_COMP_ID as bound_ligand_name,
    bl.STRUCT_ASYM_ID as bound_ligand_struct_asym_id,
    "sugar" as type,
    cd.DESCRIPTOR as descriptor,
    i.ABBREV as interpro_type,
    i.INTERPRO_ACCESSION as interpro_accession,
    i.NAME as interpro_name,
    ip.STRUCT_ASYM_ID as interpro_chain,
    a.ID + "_" + bound_molecule_display_id + "_" + bl.STRUCT_ASYM_ID as uniqueID, 
    bm_ids,
    bound_molecule_display_id,
    apoc.text.join(collect(DISTINCT(Arp.AUTH_SEQ_ID_2)), "|") as pdb_residue_auth_id, 
    apoc.text.join(collect(DISTINCT(Arp.AUTH_SEQ_ID_1)), "|") as bound_ligand_auth_id, 
    apoc.coll.occurrences(apoc.coll.flatten(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))), "hbond") as hbond_count,
    apoc.coll.occurrences(apoc.coll.flatten(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))), "covalent") as covalent_count,
    size(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))) as contact_type_count

interpro_h_bl_query: |
    MATCH
    (a:Entry {ID: $pdb_id})-[z:HAS_ENTITY]->(p:Entity  {TYPE : 'b', POLYMER_TYPE : 'B'})-[:IS_AN_INSTANCE_OF]->(bl:BoundLigand)-[part:IS_PART_OF]-(bm:BoundMolecule)
    WHERE NOT bl.CHEM_COMP_ID in ["UNX", "UNL"] AND bl.CHEM_COMP_ID in split(p.CHEM_COMP_LIST, ",")
    WITH * ORDER BY p.UNIQID, bm.ID
    WITH a, p, bl, collect(DISTINCT(bm.ID))[0] as bound_molecule_display_id,
    apoc.text.join(collect(DISTINCT(bm.ID)), "|") as bm_ids,  
    collect(DISTINCT(part.SYM_OPERATOR)) as bm_bl_sym_ops
    CALL {WITH p MATCH (p)-[:IS_A]->(cc:ChemicalComponent)-[:DESCRIBED_BY]->(cd:ChemicalComponentDesc {TYPE : "SMILES_CANONICAL"}) RETURN cd LIMIT 1}
    WITH *
    CALL {WITH bl, bm_bl_sym_ops MATCH (bl)-[Arp:HAS_ARP_CONTACT]->(pr:PDBResidue)<-[:HAS_PDB_RESIDUE]-(e:Entity  {TYPE : 'p', POLYMER_TYPE: "P"}) WHERE Arp.SYM_OP_1 IS NULL OR Arp.SYM_OP_1 = bm_bl_sym_ops[0] AND Arp.CONTACT_TYPE <> "['vdw_clash']" AND Arp.CONTACT_TYPE <> "['clash']" RETURN Arp, pr, e}
    WITH *
    CALL {WITH bl, Arp, pr MATCH (bl)-[Arp]->(pr)-[ip:IS_IN_INTERPRO]->(i:Interpro {ENTRY_TYPE: "H"}) WHERE ip.STRUCT_ASYM_ID = Arp.STRUCT_ASYM_ID_2 RETURN ip, i}
    RETURN
    a.ID as pdb_id,
    a.DESCRIPTOR as pdb_descriptor,
    a.TITLE as pdb_title,
    a.KEYWORDS as pdb_keywords,
    e.UNIQID as protein_entity_id,
    e.DESCRIPTION as protein_entity_description,
    e.UNIQID + "_" + Arp.STRUCT_ASYM_ID_2 as chainUniqueID,
    Arp.STRUCT_ASYM_ID_2 as chain_id,
    Arp.AUTH_ASYM_ID_2 as auth_chain_id,
    p.UNIQID as ligand_entity_id,
    p.ID as ligand_entity_id_numerical,
    p.DESCRIPTION as description,
    bl.UNIQID as bound_ligand_id,
    bl.CHEM_COMP_ID as bound_ligand_name,
    bl.STRUCT_ASYM_ID as bound_ligand_struct_asym_id,
    "ligand" as type,
    cd.DESCRIPTOR as descriptor,
    i.ABBREV as interpro_type,
    i.INTERPRO_ACCESSION as interpro_accession,
    i.NAME as interpro_name,
    ip.STRUCT_ASYM_ID as interpro_chain,
    a.ID + "_" + bound_molecule_display_id + "_" + bl.STRUCT_ASYM_ID as uniqueID, 
    bm_ids,
    bound_molecule_display_id,
    apoc.text.join(collect(DISTINCT(Arp.AUTH_SEQ_ID_2)), "|") as pdb_residue_auth_id, 
    apoc.text.join(collect(DISTINCT(Arp.AUTH_SEQ_ID_1)), "|") as bound_ligand_auth_id, 
    apoc.coll.occurrences(apoc.coll.flatten(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))), "hbond") as hbond_count,
    apoc.coll.occurrences(apoc.coll.flatten(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))), "covalent") as covalent_count,
    size(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))) as contact_type_count

interpro_h_sugar_query: |
    MATCH
    (a:Entry {ID: $pdb_id})-[z:HAS_ENTITY]->(p:Entity  {TYPE : 's', POLYMER_TYPE : 'S'})-[:IS_AN_INSTANCE_OF]->(bl:BoundLigand)-[part:IS_PART_OF]-(bm:BoundMolecule)
    WHERE NOT bl.CHEM_COMP_ID in ["UNX", "UNL"] AND bl.CHEM_COMP_ID in split(p.CHEM_COMP_LIST, ",")
    WITH * ORDER BY p.UNIQID, bm.ID
    WITH a, p, bl, collect(DISTINCT(bm.ID))[0] as bound_molecule_display_id,
    apoc.text.join(collect(DISTINCT(bm.ID)), "|") as bm_ids,  
    collect(DISTINCT(part.SYM_OPERATOR)) as bm_bl_sym_ops
    CALL {WITH p MATCH (p)-[:IS_A]->(cc:ChemicalComponent)-[:DESCRIBED_BY]->(cd:ChemicalComponentDesc {TYPE : "SMILES_CANONICAL"}) RETURN cd LIMIT 1}
    WITH *
    CALL {WITH bl, bm_bl_sym_ops MATCH (bl)-[Arp:HAS_ARP_CONTACT]->(pr:PDBResidue)<-[:HAS_PDB_RESIDUE]-(e:Entity  {TYPE : 'p', POLYMER_TYPE: "P"}) WHERE Arp.SYM_OP_1 IS NULL OR Arp.SYM_OP_1 = bm_bl_sym_ops[0] AND Arp.CONTACT_TYPE <> "['vdw_clash']" AND Arp.CONTACT_TYPE <> "['clash']" RETURN Arp, pr, e}
    WITH *
    CALL {WITH bl, Arp, pr MATCH (bl)-[Arp]->(pr)-[ip:IS_IN_INTERPRO]->(i:Interpro {ENTRY_TYPE: "H"}) WHERE ip.STRUCT_ASYM_ID = Arp.STRUCT_ASYM_ID_2 RETURN ip, i}
    RETURN
    a.ID as pdb_id,
    a.DESCRIPTOR as pdb_descriptor,
    a.TITLE as pdb_title,
    a.KEYWORDS as pdb_keywords,
    e.UNIQID as protein_entity_id,
    e.DESCRIPTION as protein_entity_description,
    e.UNIQID + "_" + Arp.STRUCT_ASYM_ID_2 as chainUniqueID,
    Arp.STRUCT_ASYM_ID_2 as chain_id,
    Arp.AUTH_ASYM_ID_2 as auth_chain_id,
    p.UNIQID as ligand_entity_id,
    p.ID as ligand_entity_id_numerical,
    p.DESCRIPTION as description,
    bl.UNIQID as bound_ligand_id,
    bl.CHEM_COMP_ID as bound_ligand_name,
    bl.STRUCT_ASYM_ID as bound_ligand_struct_asym_id,
    "sugar" as type,
    cd.DESCRIPTOR as descriptor,
    i.ABBREV as interpro_type,
    i.INTERPRO_ACCESSION as interpro_accession,
    i.NAME as interpro_name,
    ip.STRUCT_ASYM_ID as interpro_chain,
    a.ID + "_" + bound_molecule_display_id + "_" + bl.STRUCT_ASYM_ID as uniqueID, 
    bm_ids,
    bound_molecule_display_id,
    apoc.text.join(collect(DISTINCT(Arp.AUTH_SEQ_ID_2)), "|") as pdb_residue_auth_id, 
    apoc.text.join(collect(DISTINCT(Arp.AUTH_SEQ_ID_1)), "|") as bound_ligand_auth_id, 
    apoc.coll.occurrences(apoc.coll.flatten(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))), "hbond") as hbond_count,
    apoc.coll.occurrences(apoc.coll.flatten(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))), "covalent") as covalent_count,
    size(collect(split(apoc.text.replace(Arp.CONTACT_TYPE, "[\\[\\]' ]", ""), ","))) as contact_type_count